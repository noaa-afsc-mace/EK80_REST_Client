# coding: utf-8

"""
    REST API for setting up data subscriptions on the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # How to start data output  1. Create a subscription  2. Create a communication end point  3. Add the subscription to the communication end point      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ek80_data_client.api_client import ApiClient


class CreateADataSubscriptionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_adcp_backscatter_subscription(self, specification, **kwargs):  # noqa: E501
        """Create an adcp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_adcp_backscatter.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_adcp_backscatter_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpBackscatterSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_adcp_backscatter_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_adcp_backscatter_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_adcp_backscatter_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create an adcp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_adcp_backscatter.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_adcp_backscatter_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpBackscatterSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_adcp_backscatter_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_adcp_backscatter_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/adcp-backscatter-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_adcp_beam_data_subscription(self, specification, **kwargs):  # noqa: E501
        """Create an adcp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_adcp_beamdata.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_adcp_beam_data_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpBeamDataSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_adcp_beam_data_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_adcp_beam_data_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_adcp_beam_data_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create an adcp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_adcp_beamdata.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_adcp_beam_data_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpBeamDataSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_adcp_beam_data_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_adcp_beam_data_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/adcp-beam-data-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_adcp_bottom_detector_subscription(self, specification, **kwargs):  # noqa: E501
        """Create an adcp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_adcp_bottom_detector.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_adcp_bottom_detector_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpBottomDetectorSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_adcp_bottom_detector_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_adcp_bottom_detector_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_adcp_bottom_detector_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create an adcp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_adcp_bottom_detector.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_adcp_bottom_detector_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpBottomDetectorSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_adcp_bottom_detector_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_adcp_bottom_detector_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/adcp-bottom-detector-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_adcp_output_subscription(self, specification, **kwargs):  # noqa: E501
        """Create an adcp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_adcp_output.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_adcp_output_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpOutputSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_adcp_output_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_adcp_output_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_adcp_output_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create an adcp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_adcp_output.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_adcp_output_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpOutputSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_adcp_output_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_adcp_output_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/adcp-output-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_adcp_quality_factor_subscription(self, specification, **kwargs):  # noqa: E501
        """Create an adcp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_adcp_quality_factor.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_adcp_quality_factor_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpQualityFactorSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_adcp_quality_factor_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_adcp_quality_factor_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_adcp_quality_factor_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create an adcp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_adcp_quality_factor.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_adcp_quality_factor_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpQualityFactorSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_adcp_quality_factor_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_adcp_quality_factor_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/adcp-quality-factor-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_adcp_velocity_subscription(self, specification, **kwargs):  # noqa: E501
        """Create an adcp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_adcp_velocity.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_adcp_velocity_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpVelocitySubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_adcp_velocity_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_adcp_velocity_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_adcp_velocity_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create an adcp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_adcp_velocity.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_adcp_velocity_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpVelocitySubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_adcp_velocity_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_adcp_velocity_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/adcp-velocity-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_bottom_detection_subscription(self, specification, **kwargs):  # noqa: E501
        """Create a bottom detection data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_bottom_detection.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bottom_detection_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BottomDetectionSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_bottom_detection_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_bottom_detection_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_bottom_detection_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create a bottom detection data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_bottom_detection.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_bottom_detection_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BottomDetectionSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bottom_detection_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_bottom_detection_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/bottom-detection-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_echogram_subscription(self, specification, **kwargs):  # noqa: E501
        """Create an echogram data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_echogram.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_echogram_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EchogramSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_echogram_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_echogram_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_echogram_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create an echogram data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_echogram.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_echogram_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EchogramSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_echogram_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_echogram_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/echogram-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_integration_chirp_subscription(self, specification, **kwargs):  # noqa: E501
        """Create an integration chirp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_integration_chirp.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_integration_chirp_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntegrationChirpSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_integration_chirp_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_integration_chirp_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_integration_chirp_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create an integration chirp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_integration_chirp.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_integration_chirp_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntegrationChirpSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_integration_chirp_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_integration_chirp_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/integration-chirp-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_integration_subscription(self, specification, **kwargs):  # noqa: E501
        """Create an integration data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_integration.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_integration_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntegrationSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_integration_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_integration_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_integration_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create an integration data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_integration.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_integration_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IntegrationSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_integration_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_integration_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/integration-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_noise_spectrum_subscription(self, specification, **kwargs):  # noqa: E501
        """Create a noise spectrum data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_noise_spectrum.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_noise_spectrum_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NoiseSpectrumSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_noise_spectrum_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_noise_spectrum_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_noise_spectrum_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create a noise spectrum data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_noise_spectrum.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_noise_spectrum_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NoiseSpectrumSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_noise_spectrum_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_noise_spectrum_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/noise-spectrum-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_sample_data_subscription(self, specification, **kwargs):  # noqa: E501
        """Create a processed sample-data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_sample_data.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_sample_data_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SampleDataSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_sample_data_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_sample_data_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_sample_data_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create a processed sample-data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_sample_data.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_sample_data_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SampleDataSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sample_data_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_sample_data_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/sample-data-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_system_state_subscription(self, specification, **kwargs):  # noqa: E501
        """Create a system state data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_system_state.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_system_state_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SystemStateSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_system_state_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_system_state_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_system_state_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create a system state data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_system_state.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_system_state_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SystemStateSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_system_state_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_system_state_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/system-state-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_targets_echogram_subscription(self, specification, **kwargs):  # noqa: E501
        """Create a targets echogram data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_targets_echogram.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_targets_echogram_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TargetsEchogramSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_targets_echogram_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_targets_echogram_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_targets_echogram_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create a targets echogram data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_targets_echogram.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_targets_echogram_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TargetsEchogramSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_targets_echogram_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_targets_echogram_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/targets-echogram-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_targets_integration_subscription(self, specification, **kwargs):  # noqa: E501
        """Create a targets integration data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_integration.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_targets_integration_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TargetsIntegrationSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_targets_integration_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_targets_integration_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_targets_integration_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create a targets integration data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_integration.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_targets_integration_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TargetsIntegrationSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_targets_integration_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_targets_integration_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/targets-integration-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ts_detection_chirp_subscription(self, specification, **kwargs):  # noqa: E501
        """Create a ts detection chirp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_ts_detection_chirp.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ts_detection_chirp_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TsDetectionChirpSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ts_detection_chirp_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ts_detection_chirp_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_ts_detection_chirp_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create a ts detection chirp data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_ts_detection_chirp.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ts_detection_chirp_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TsDetectionChirpSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ts_detection_chirp_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_ts_detection_chirp_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/ts-detection-chirp-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ts_detection_subscription(self, specification, **kwargs):  # noqa: E501
        """Create a ts detection data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_ts_detection.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ts_detection_subscription(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TsDetectionSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ts_detection_subscription_with_http_info(specification, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ts_detection_subscription_with_http_info(specification, **kwargs)  # noqa: E501
            return data

    def create_ts_detection_subscription_with_http_info(self, specification, **kwargs):  # noqa: E501
        """Create a ts detection data subscription  # noqa: E501

        Subscription online help:   <a href=\"https://simrad.online/ek80/interface_en/subscr_type_ts_detection.html\" target=\"foo\">parameter description</a>.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ts_detection_subscription_with_http_info(specification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TsDetectionSubscriptionSpecification specification: Specification of the data requested (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['specification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ts_detection_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `create_ts_detection_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'specification' in params:
            body_params = params['specification']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/data-output/ts-detection-subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
