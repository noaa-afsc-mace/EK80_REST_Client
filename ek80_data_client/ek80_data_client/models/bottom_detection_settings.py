# coding: utf-8

"""
    REST API for setting up data subscriptions on the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # How to start data output  1. Create a subscription  2. Create a communication end point  3. Add the subscription to the communication end point      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BottomDetectionSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upper_detector_limit': 'float',
        'lower_detector_limit': 'float',
        'bottom_back_step': 'float'
    }

    attribute_map = {
        'upper_detector_limit': 'upper-detector-limit',
        'lower_detector_limit': 'lower-detector-limit',
        'bottom_back_step': 'bottom-back-step'
    }

    def __init__(self, upper_detector_limit=10.0, lower_detector_limit=1000.0, bottom_back_step=-50.0):  # noqa: E501
        """BottomDetectionSettings - a model defined in Swagger"""  # noqa: E501

        self._upper_detector_limit = None
        self._lower_detector_limit = None
        self._bottom_back_step = None
        self.discriminator = None

        if upper_detector_limit is not None:
            self.upper_detector_limit = upper_detector_limit
        if lower_detector_limit is not None:
            self.lower_detector_limit = lower_detector_limit
        if bottom_back_step is not None:
            self.bottom_back_step = bottom_back_step

    @property
    def upper_detector_limit(self):
        """Gets the upper_detector_limit of this BottomDetectionSettings.  # noqa: E501


        :return: The upper_detector_limit of this BottomDetectionSettings.  # noqa: E501
        :rtype: float
        """
        return self._upper_detector_limit

    @upper_detector_limit.setter
    def upper_detector_limit(self, upper_detector_limit):
        """Sets the upper_detector_limit of this BottomDetectionSettings.


        :param upper_detector_limit: The upper_detector_limit of this BottomDetectionSettings.  # noqa: E501
        :type: float
        """

        self._upper_detector_limit = upper_detector_limit

    @property
    def lower_detector_limit(self):
        """Gets the lower_detector_limit of this BottomDetectionSettings.  # noqa: E501


        :return: The lower_detector_limit of this BottomDetectionSettings.  # noqa: E501
        :rtype: float
        """
        return self._lower_detector_limit

    @lower_detector_limit.setter
    def lower_detector_limit(self, lower_detector_limit):
        """Sets the lower_detector_limit of this BottomDetectionSettings.


        :param lower_detector_limit: The lower_detector_limit of this BottomDetectionSettings.  # noqa: E501
        :type: float
        """

        self._lower_detector_limit = lower_detector_limit

    @property
    def bottom_back_step(self):
        """Gets the bottom_back_step of this BottomDetectionSettings.  # noqa: E501


        :return: The bottom_back_step of this BottomDetectionSettings.  # noqa: E501
        :rtype: float
        """
        return self._bottom_back_step

    @bottom_back_step.setter
    def bottom_back_step(self, bottom_back_step):
        """Sets the bottom_back_step of this BottomDetectionSettings.


        :param bottom_back_step: The bottom_back_step of this BottomDetectionSettings.  # noqa: E501
        :type: float
        """

        self._bottom_back_step = bottom_back_step

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BottomDetectionSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BottomDetectionSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
