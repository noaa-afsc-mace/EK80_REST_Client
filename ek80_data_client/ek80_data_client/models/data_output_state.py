# coding: utf-8

"""
    REST API for setting up data subscriptions on the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # How to start data output  1. Create a subscription  2. Create a communication end point  3. Add the subscription to the communication end point      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataOutputState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_summary': 'list[SubscriptionSummary]',
        'available_data_sources': 'list[str]',
        'communication_end_points': 'list[CommunicationEndPointInfo]'
    }

    attribute_map = {
        'subscription_summary': 'subscription-summary',
        'available_data_sources': 'available-data-sources',
        'communication_end_points': 'communication-end-points'
    }

    def __init__(self, subscription_summary=None, available_data_sources=None, communication_end_points=None):  # noqa: E501
        """DataOutputState - a model defined in Swagger"""  # noqa: E501

        self._subscription_summary = None
        self._available_data_sources = None
        self._communication_end_points = None
        self.discriminator = None

        if subscription_summary is not None:
            self.subscription_summary = subscription_summary
        if available_data_sources is not None:
            self.available_data_sources = available_data_sources
        if communication_end_points is not None:
            self.communication_end_points = communication_end_points

    @property
    def subscription_summary(self):
        """Gets the subscription_summary of this DataOutputState.  # noqa: E501


        :return: The subscription_summary of this DataOutputState.  # noqa: E501
        :rtype: list[SubscriptionSummary]
        """
        return self._subscription_summary

    @subscription_summary.setter
    def subscription_summary(self, subscription_summary):
        """Sets the subscription_summary of this DataOutputState.


        :param subscription_summary: The subscription_summary of this DataOutputState.  # noqa: E501
        :type: list[SubscriptionSummary]
        """

        self._subscription_summary = subscription_summary

    @property
    def available_data_sources(self):
        """Gets the available_data_sources of this DataOutputState.  # noqa: E501


        :return: The available_data_sources of this DataOutputState.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_data_sources

    @available_data_sources.setter
    def available_data_sources(self, available_data_sources):
        """Sets the available_data_sources of this DataOutputState.


        :param available_data_sources: The available_data_sources of this DataOutputState.  # noqa: E501
        :type: list[str]
        """

        self._available_data_sources = available_data_sources

    @property
    def communication_end_points(self):
        """Gets the communication_end_points of this DataOutputState.  # noqa: E501


        :return: The communication_end_points of this DataOutputState.  # noqa: E501
        :rtype: list[CommunicationEndPointInfo]
        """
        return self._communication_end_points

    @communication_end_points.setter
    def communication_end_points(self, communication_end_points):
        """Sets the communication_end_points of this DataOutputState.


        :param communication_end_points: The communication_end_points of this DataOutputState.  # noqa: E501
        :type: list[CommunicationEndPointInfo]
        """

        self._communication_end_points = communication_end_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataOutputState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataOutputState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
