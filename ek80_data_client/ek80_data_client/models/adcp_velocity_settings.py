# coding: utf-8

"""
    REST API for setting up data subscriptions on the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # How to start data output  1. Create a subscription  2. Create a communication end point  3. Add the subscription to the communication end point      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdcpVelocitySettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'velocity_type': 'str',
        'range': 'float',
        'range_start': 'float',
        'average': 'int',
        'stop_at_bottom': 'str',
        'use_heave_adjustment': 'bool',
        'decimation': 'str'
    }

    attribute_map = {
        'velocity_type': 'velocity-type',
        'range': 'range',
        'range_start': 'range-start',
        'average': 'average',
        'stop_at_bottom': 'stop-at-bottom',
        'use_heave_adjustment': 'use-heave-adjustment',
        'decimation': 'decimation'
    }

    def __init__(self, velocity_type=None, range=None, range_start=0.0, average=1, stop_at_bottom='full', use_heave_adjustment=True, decimation='none'):  # noqa: E501
        """AdcpVelocitySettings - a model defined in Swagger"""  # noqa: E501

        self._velocity_type = None
        self._range = None
        self._range_start = None
        self._average = None
        self._stop_at_bottom = None
        self._use_heave_adjustment = None
        self._decimation = None
        self.discriminator = None

        self.velocity_type = velocity_type
        self.range = range
        if range_start is not None:
            self.range_start = range_start
        if average is not None:
            self.average = average
        if stop_at_bottom is not None:
            self.stop_at_bottom = stop_at_bottom
        if use_heave_adjustment is not None:
            self.use_heave_adjustment = use_heave_adjustment
        if decimation is not None:
            self.decimation = decimation

    @property
    def velocity_type(self):
        """Gets the velocity_type of this AdcpVelocitySettings.  # noqa: E501


        :return: The velocity_type of this AdcpVelocitySettings.  # noqa: E501
        :rtype: str
        """
        return self._velocity_type

    @velocity_type.setter
    def velocity_type(self, velocity_type):
        """Sets the velocity_type of this AdcpVelocitySettings.


        :param velocity_type: The velocity_type of this AdcpVelocitySettings.  # noqa: E501
        :type: str
        """
        if velocity_type is None:
            raise ValueError("Invalid value for `velocity_type`, must not be `None`")  # noqa: E501
        allowed_values = ["velocity-fore", "velocity-starboard", "velocity-down", "velocity-vessel", "velocity-north", "velocity-east", "velocity-vertical", "velocity-geo"]  # noqa: E501
        if velocity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `velocity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(velocity_type, allowed_values)
            )

        self._velocity_type = velocity_type

    @property
    def range(self):
        """Gets the range of this AdcpVelocitySettings.  # noqa: E501


        :return: The range of this AdcpVelocitySettings.  # noqa: E501
        :rtype: float
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this AdcpVelocitySettings.


        :param range: The range of this AdcpVelocitySettings.  # noqa: E501
        :type: float
        """
        if range is None:
            raise ValueError("Invalid value for `range`, must not be `None`")  # noqa: E501
        if range is not None and range > 20000:  # noqa: E501
            raise ValueError("Invalid value for `range`, must be a value less than or equal to `20000`")  # noqa: E501

        self._range = range

    @property
    def range_start(self):
        """Gets the range_start of this AdcpVelocitySettings.  # noqa: E501


        :return: The range_start of this AdcpVelocitySettings.  # noqa: E501
        :rtype: float
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """Sets the range_start of this AdcpVelocitySettings.


        :param range_start: The range_start of this AdcpVelocitySettings.  # noqa: E501
        :type: float
        """
        if range_start is not None and range_start > 20000:  # noqa: E501
            raise ValueError("Invalid value for `range_start`, must be a value less than or equal to `20000`")  # noqa: E501
        if range_start is not None and range_start < -20000:  # noqa: E501
            raise ValueError("Invalid value for `range_start`, must be a value greater than or equal to `-20000`")  # noqa: E501

        self._range_start = range_start

    @property
    def average(self):
        """Gets the average of this AdcpVelocitySettings.  # noqa: E501


        :return: The average of this AdcpVelocitySettings.  # noqa: E501
        :rtype: int
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this AdcpVelocitySettings.


        :param average: The average of this AdcpVelocitySettings.  # noqa: E501
        :type: int
        """
        if average is not None and average > 300:  # noqa: E501
            raise ValueError("Invalid value for `average`, must be a value less than or equal to `300`")  # noqa: E501
        if average is not None and average < 1:  # noqa: E501
            raise ValueError("Invalid value for `average`, must be a value greater than or equal to `1`")  # noqa: E501

        self._average = average

    @property
    def stop_at_bottom(self):
        """Gets the stop_at_bottom of this AdcpVelocitySettings.  # noqa: E501


        :return: The stop_at_bottom of this AdcpVelocitySettings.  # noqa: E501
        :rtype: str
        """
        return self._stop_at_bottom

    @stop_at_bottom.setter
    def stop_at_bottom(self, stop_at_bottom):
        """Sets the stop_at_bottom of this AdcpVelocitySettings.


        :param stop_at_bottom: The stop_at_bottom of this AdcpVelocitySettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["full", "first-hit", "last-hit"]  # noqa: E501
        if stop_at_bottom not in allowed_values:
            raise ValueError(
                "Invalid value for `stop_at_bottom` ({0}), must be one of {1}"  # noqa: E501
                .format(stop_at_bottom, allowed_values)
            )

        self._stop_at_bottom = stop_at_bottom

    @property
    def use_heave_adjustment(self):
        """Gets the use_heave_adjustment of this AdcpVelocitySettings.  # noqa: E501


        :return: The use_heave_adjustment of this AdcpVelocitySettings.  # noqa: E501
        :rtype: bool
        """
        return self._use_heave_adjustment

    @use_heave_adjustment.setter
    def use_heave_adjustment(self, use_heave_adjustment):
        """Sets the use_heave_adjustment of this AdcpVelocitySettings.


        :param use_heave_adjustment: The use_heave_adjustment of this AdcpVelocitySettings.  # noqa: E501
        :type: bool
        """

        self._use_heave_adjustment = use_heave_adjustment

    @property
    def decimation(self):
        """Gets the decimation of this AdcpVelocitySettings.  # noqa: E501


        :return: The decimation of this AdcpVelocitySettings.  # noqa: E501
        :rtype: str
        """
        return self._decimation

    @decimation.setter
    def decimation(self, decimation):
        """Sets the decimation of this AdcpVelocitySettings.


        :param decimation: The decimation of this AdcpVelocitySettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "10", "cell-size"]  # noqa: E501
        if decimation not in allowed_values:
            raise ValueError(
                "Invalid value for `decimation` ({0}), must be one of {1}"  # noqa: E501
                .format(decimation, allowed_values)
            )

        self._decimation = decimation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdcpVelocitySettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdcpVelocitySettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
