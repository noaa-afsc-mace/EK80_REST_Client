# coding: utf-8

"""
    REST API for setting up data subscriptions on the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # How to start data output  1. Create a subscription  2. Create a communication end point  3. Add the subscription to the communication end point      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EchoSounderPing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ping_name': 'str',
        'range': 'float',
        'frequency': 'float',
        'tx_amplitude': 'TxAmplitudeData',
        'pulse': 'PulseData',
        'channel_mode': 'str',
        'weight_set_name': 'str',
        'octopus_ping': 'OctopusPingParameters'
    }

    attribute_map = {
        'ping_name': 'ping-name',
        'range': 'range',
        'frequency': 'frequency',
        'tx_amplitude': 'tx-amplitude',
        'pulse': 'pulse',
        'channel_mode': 'channel-mode',
        'weight_set_name': 'weight-set-name',
        'octopus_ping': 'octopus-ping'
    }

    def __init__(self, ping_name=None, range=None, frequency=None, tx_amplitude=None, pulse=None, channel_mode=None, weight_set_name=None, octopus_ping=None):  # noqa: E501
        """EchoSounderPing - a model defined in Swagger"""  # noqa: E501

        self._ping_name = None
        self._range = None
        self._frequency = None
        self._tx_amplitude = None
        self._pulse = None
        self._channel_mode = None
        self._weight_set_name = None
        self._octopus_ping = None
        self.discriminator = None

        if ping_name is not None:
            self.ping_name = ping_name
        if range is not None:
            self.range = range
        if frequency is not None:
            self.frequency = frequency
        if tx_amplitude is not None:
            self.tx_amplitude = tx_amplitude
        if pulse is not None:
            self.pulse = pulse
        if channel_mode is not None:
            self.channel_mode = channel_mode
        if weight_set_name is not None:
            self.weight_set_name = weight_set_name
        if octopus_ping is not None:
            self.octopus_ping = octopus_ping

    @property
    def ping_name(self):
        """Gets the ping_name of this EchoSounderPing.  # noqa: E501


        :return: The ping_name of this EchoSounderPing.  # noqa: E501
        :rtype: str
        """
        return self._ping_name

    @ping_name.setter
    def ping_name(self, ping_name):
        """Sets the ping_name of this EchoSounderPing.


        :param ping_name: The ping_name of this EchoSounderPing.  # noqa: E501
        :type: str
        """

        self._ping_name = ping_name

    @property
    def range(self):
        """Gets the range of this EchoSounderPing.  # noqa: E501


        :return: The range of this EchoSounderPing.  # noqa: E501
        :rtype: float
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this EchoSounderPing.


        :param range: The range of this EchoSounderPing.  # noqa: E501
        :type: float
        """

        self._range = range

    @property
    def frequency(self):
        """Gets the frequency of this EchoSounderPing.  # noqa: E501


        :return: The frequency of this EchoSounderPing.  # noqa: E501
        :rtype: float
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this EchoSounderPing.


        :param frequency: The frequency of this EchoSounderPing.  # noqa: E501
        :type: float
        """

        self._frequency = frequency

    @property
    def tx_amplitude(self):
        """Gets the tx_amplitude of this EchoSounderPing.  # noqa: E501


        :return: The tx_amplitude of this EchoSounderPing.  # noqa: E501
        :rtype: TxAmplitudeData
        """
        return self._tx_amplitude

    @tx_amplitude.setter
    def tx_amplitude(self, tx_amplitude):
        """Sets the tx_amplitude of this EchoSounderPing.


        :param tx_amplitude: The tx_amplitude of this EchoSounderPing.  # noqa: E501
        :type: TxAmplitudeData
        """

        self._tx_amplitude = tx_amplitude

    @property
    def pulse(self):
        """Gets the pulse of this EchoSounderPing.  # noqa: E501


        :return: The pulse of this EchoSounderPing.  # noqa: E501
        :rtype: PulseData
        """
        return self._pulse

    @pulse.setter
    def pulse(self, pulse):
        """Sets the pulse of this EchoSounderPing.


        :param pulse: The pulse of this EchoSounderPing.  # noqa: E501
        :type: PulseData
        """

        self._pulse = pulse

    @property
    def channel_mode(self):
        """Gets the channel_mode of this EchoSounderPing.  # noqa: E501


        :return: The channel_mode of this EchoSounderPing.  # noqa: E501
        :rtype: str
        """
        return self._channel_mode

    @channel_mode.setter
    def channel_mode(self, channel_mode):
        """Sets the channel_mode of this EchoSounderPing.


        :param channel_mode: The channel_mode of this EchoSounderPing.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "passive", "test"]  # noqa: E501
        if channel_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(channel_mode, allowed_values)
            )

        self._channel_mode = channel_mode

    @property
    def weight_set_name(self):
        """Gets the weight_set_name of this EchoSounderPing.  # noqa: E501


        :return: The weight_set_name of this EchoSounderPing.  # noqa: E501
        :rtype: str
        """
        return self._weight_set_name

    @weight_set_name.setter
    def weight_set_name(self, weight_set_name):
        """Sets the weight_set_name of this EchoSounderPing.


        :param weight_set_name: The weight_set_name of this EchoSounderPing.  # noqa: E501
        :type: str
        """

        self._weight_set_name = weight_set_name

    @property
    def octopus_ping(self):
        """Gets the octopus_ping of this EchoSounderPing.  # noqa: E501


        :return: The octopus_ping of this EchoSounderPing.  # noqa: E501
        :rtype: OctopusPingParameters
        """
        return self._octopus_ping

    @octopus_ping.setter
    def octopus_ping(self, octopus_ping):
        """Sets the octopus_ping of this EchoSounderPing.


        :param octopus_ping: The octopus_ping of this EchoSounderPing.  # noqa: E501
        :type: OctopusPingParameters
        """

        self._octopus_ping = octopus_ping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EchoSounderPing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EchoSounderPing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
