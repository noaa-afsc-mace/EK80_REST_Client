# coding: utf-8

"""
    REST API for setting up data subscriptions on the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # How to start data output  1. Create a subscription  2. Create a communication end point  3. Add the subscription to the communication end point      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SubscriptionSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_type': 'str',
        'subscription_id': 'int',
        'status': 'str',
        'subscription_name': 'str',
        'subscriber_name': 'str',
        'additional_info': 'str',
        'end_point_ids': 'str'
    }

    attribute_map = {
        'subscription_type': 'subscription-type',
        'subscription_id': 'subscription-id',
        'status': 'status',
        'subscription_name': 'subscription-name',
        'subscriber_name': 'subscriber-name',
        'additional_info': 'additional-info',
        'end_point_ids': 'end-point-ids'
    }

    def __init__(self, subscription_type=None, subscription_id=None, status=None, subscription_name=None, subscriber_name=None, additional_info=None, end_point_ids=None):  # noqa: E501
        """SubscriptionSummary - a model defined in Swagger"""  # noqa: E501

        self._subscription_type = None
        self._subscription_id = None
        self._status = None
        self._subscription_name = None
        self._subscriber_name = None
        self._additional_info = None
        self._end_point_ids = None
        self.discriminator = None

        if subscription_type is not None:
            self.subscription_type = subscription_type
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if status is not None:
            self.status = status
        if subscription_name is not None:
            self.subscription_name = subscription_name
        if subscriber_name is not None:
            self.subscriber_name = subscriber_name
        if additional_info is not None:
            self.additional_info = additional_info
        if end_point_ids is not None:
            self.end_point_ids = end_point_ids

    @property
    def subscription_type(self):
        """Gets the subscription_type of this SubscriptionSummary.  # noqa: E501


        :return: The subscription_type of this SubscriptionSummary.  # noqa: E501
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this SubscriptionSummary.


        :param subscription_type: The subscription_type of this SubscriptionSummary.  # noqa: E501
        :type: str
        """

        self._subscription_type = subscription_type

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionSummary.  # noqa: E501


        :return: The subscription_id of this SubscriptionSummary.  # noqa: E501
        :rtype: int
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionSummary.


        :param subscription_id: The subscription_id of this SubscriptionSummary.  # noqa: E501
        :type: int
        """

        self._subscription_id = subscription_id

    @property
    def status(self):
        """Gets the status of this SubscriptionSummary.  # noqa: E501


        :return: The status of this SubscriptionSummary.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionSummary.


        :param status: The status of this SubscriptionSummary.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subscription_name(self):
        """Gets the subscription_name of this SubscriptionSummary.  # noqa: E501


        :return: The subscription_name of this SubscriptionSummary.  # noqa: E501
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this SubscriptionSummary.


        :param subscription_name: The subscription_name of this SubscriptionSummary.  # noqa: E501
        :type: str
        """

        self._subscription_name = subscription_name

    @property
    def subscriber_name(self):
        """Gets the subscriber_name of this SubscriptionSummary.  # noqa: E501


        :return: The subscriber_name of this SubscriptionSummary.  # noqa: E501
        :rtype: str
        """
        return self._subscriber_name

    @subscriber_name.setter
    def subscriber_name(self, subscriber_name):
        """Sets the subscriber_name of this SubscriptionSummary.


        :param subscriber_name: The subscriber_name of this SubscriptionSummary.  # noqa: E501
        :type: str
        """

        self._subscriber_name = subscriber_name

    @property
    def additional_info(self):
        """Gets the additional_info of this SubscriptionSummary.  # noqa: E501


        :return: The additional_info of this SubscriptionSummary.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this SubscriptionSummary.


        :param additional_info: The additional_info of this SubscriptionSummary.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def end_point_ids(self):
        """Gets the end_point_ids of this SubscriptionSummary.  # noqa: E501


        :return: The end_point_ids of this SubscriptionSummary.  # noqa: E501
        :rtype: str
        """
        return self._end_point_ids

    @end_point_ids.setter
    def end_point_ids(self, end_point_ids):
        """Sets the end_point_ids of this SubscriptionSummary.


        :param end_point_ids: The end_point_ids of this SubscriptionSummary.  # noqa: E501
        :type: str
        """

        self._end_point_ids = end_point_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
