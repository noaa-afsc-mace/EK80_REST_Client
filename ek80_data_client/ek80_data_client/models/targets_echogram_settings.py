# coding: utf-8

"""
    REST API for setting up data subscriptions on the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # How to start data output  1. Create a subscription  2. Create a communication end point  3. Add the subscription to the communication end point      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TargetsEchogramSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pixel_count': 'int',
        'range': 'float',
        'range_start': 'float',
        'tvg_type': 'str',
        'echogram_type': 'str',
        'min_ts_value': 'float',
        'min_echo_length': 'float',
        'max_echo_length': 'float',
        'max_gain_compensation': 'float',
        'max_phase_deviation': 'float',
        'compression_type': 'str',
        'expansion_type': 'str'
    }

    attribute_map = {
        'pixel_count': 'pixel-count',
        'range': 'range',
        'range_start': 'range-start',
        'tvg_type': 'tvg-type',
        'echogram_type': 'echogram-type',
        'min_ts_value': 'min-ts-value',
        'min_echo_length': 'min-echo-length',
        'max_echo_length': 'max-echo-length',
        'max_gain_compensation': 'max-gain-compensation',
        'max_phase_deviation': 'max-phase-deviation',
        'compression_type': 'compression-type',
        'expansion_type': 'expansion-type'
    }

    def __init__(self, pixel_count=500, range=500.0, range_start=10.0, tvg_type='sv', echogram_type='surface', min_ts_value=-50.0, min_echo_length=0.8, max_echo_length=1.8, max_gain_compensation=6.0, max_phase_deviation=8.0, compression_type='mean', expansion_type='interpolate'):  # noqa: E501
        """TargetsEchogramSettings - a model defined in Swagger"""  # noqa: E501

        self._pixel_count = None
        self._range = None
        self._range_start = None
        self._tvg_type = None
        self._echogram_type = None
        self._min_ts_value = None
        self._min_echo_length = None
        self._max_echo_length = None
        self._max_gain_compensation = None
        self._max_phase_deviation = None
        self._compression_type = None
        self._expansion_type = None
        self.discriminator = None

        self.pixel_count = pixel_count
        self.range = range
        if range_start is not None:
            self.range_start = range_start
        self.tvg_type = tvg_type
        self.echogram_type = echogram_type
        if min_ts_value is not None:
            self.min_ts_value = min_ts_value
        if min_echo_length is not None:
            self.min_echo_length = min_echo_length
        if max_echo_length is not None:
            self.max_echo_length = max_echo_length
        if max_gain_compensation is not None:
            self.max_gain_compensation = max_gain_compensation
        if max_phase_deviation is not None:
            self.max_phase_deviation = max_phase_deviation
        self.compression_type = compression_type
        self.expansion_type = expansion_type

    @property
    def pixel_count(self):
        """Gets the pixel_count of this TargetsEchogramSettings.  # noqa: E501


        :return: The pixel_count of this TargetsEchogramSettings.  # noqa: E501
        :rtype: int
        """
        return self._pixel_count

    @pixel_count.setter
    def pixel_count(self, pixel_count):
        """Sets the pixel_count of this TargetsEchogramSettings.


        :param pixel_count: The pixel_count of this TargetsEchogramSettings.  # noqa: E501
        :type: int
        """
        if pixel_count is None:
            raise ValueError("Invalid value for `pixel_count`, must not be `None`")  # noqa: E501
        if pixel_count is not None and pixel_count > 10000:  # noqa: E501
            raise ValueError("Invalid value for `pixel_count`, must be a value less than or equal to `10000`")  # noqa: E501
        if pixel_count is not None and pixel_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `pixel_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pixel_count = pixel_count

    @property
    def range(self):
        """Gets the range of this TargetsEchogramSettings.  # noqa: E501


        :return: The range of this TargetsEchogramSettings.  # noqa: E501
        :rtype: float
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this TargetsEchogramSettings.


        :param range: The range of this TargetsEchogramSettings.  # noqa: E501
        :type: float
        """
        if range is None:
            raise ValueError("Invalid value for `range`, must not be `None`")  # noqa: E501
        if range is not None and range > 10000:  # noqa: E501
            raise ValueError("Invalid value for `range`, must be a value less than or equal to `10000`")  # noqa: E501
        if range is not None and range < 0:  # noqa: E501
            raise ValueError("Invalid value for `range`, must be a value greater than or equal to `0`")  # noqa: E501

        self._range = range

    @property
    def range_start(self):
        """Gets the range_start of this TargetsEchogramSettings.  # noqa: E501


        :return: The range_start of this TargetsEchogramSettings.  # noqa: E501
        :rtype: float
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """Sets the range_start of this TargetsEchogramSettings.


        :param range_start: The range_start of this TargetsEchogramSettings.  # noqa: E501
        :type: float
        """
        if range_start is not None and range_start > 10000:  # noqa: E501
            raise ValueError("Invalid value for `range_start`, must be a value less than or equal to `10000`")  # noqa: E501
        if range_start is not None and range_start < 0:  # noqa: E501
            raise ValueError("Invalid value for `range_start`, must be a value greater than or equal to `0`")  # noqa: E501

        self._range_start = range_start

    @property
    def tvg_type(self):
        """Gets the tvg_type of this TargetsEchogramSettings.  # noqa: E501


        :return: The tvg_type of this TargetsEchogramSettings.  # noqa: E501
        :rtype: str
        """
        return self._tvg_type

    @tvg_type.setter
    def tvg_type(self, tvg_type):
        """Sets the tvg_type of this TargetsEchogramSettings.


        :param tvg_type: The tvg_type of this TargetsEchogramSettings.  # noqa: E501
        :type: str
        """
        if tvg_type is None:
            raise ValueError("Invalid value for `tvg_type`, must not be `None`")  # noqa: E501
        allowed_values = ["sv", "pr", "sp", "ts", "ss", "sp-and-ts", "user", "s-process-chain"]  # noqa: E501
        if tvg_type not in allowed_values:
            raise ValueError(
                "Invalid value for `tvg_type` ({0}), must be one of {1}"  # noqa: E501
                .format(tvg_type, allowed_values)
            )

        self._tvg_type = tvg_type

    @property
    def echogram_type(self):
        """Gets the echogram_type of this TargetsEchogramSettings.  # noqa: E501


        :return: The echogram_type of this TargetsEchogramSettings.  # noqa: E501
        :rtype: str
        """
        return self._echogram_type

    @echogram_type.setter
    def echogram_type(self, echogram_type):
        """Sets the echogram_type of this TargetsEchogramSettings.


        :param echogram_type: The echogram_type of this TargetsEchogramSettings.  # noqa: E501
        :type: str
        """
        if echogram_type is None:
            raise ValueError("Invalid value for `echogram_type`, must not be `None`")  # noqa: E501
        allowed_values = ["surface", "bottom", "trawl"]  # noqa: E501
        if echogram_type not in allowed_values:
            raise ValueError(
                "Invalid value for `echogram_type` ({0}), must be one of {1}"  # noqa: E501
                .format(echogram_type, allowed_values)
            )

        self._echogram_type = echogram_type

    @property
    def min_ts_value(self):
        """Gets the min_ts_value of this TargetsEchogramSettings.  # noqa: E501


        :return: The min_ts_value of this TargetsEchogramSettings.  # noqa: E501
        :rtype: float
        """
        return self._min_ts_value

    @min_ts_value.setter
    def min_ts_value(self, min_ts_value):
        """Sets the min_ts_value of this TargetsEchogramSettings.


        :param min_ts_value: The min_ts_value of this TargetsEchogramSettings.  # noqa: E501
        :type: float
        """

        self._min_ts_value = min_ts_value

    @property
    def min_echo_length(self):
        """Gets the min_echo_length of this TargetsEchogramSettings.  # noqa: E501


        :return: The min_echo_length of this TargetsEchogramSettings.  # noqa: E501
        :rtype: float
        """
        return self._min_echo_length

    @min_echo_length.setter
    def min_echo_length(self, min_echo_length):
        """Sets the min_echo_length of this TargetsEchogramSettings.


        :param min_echo_length: The min_echo_length of this TargetsEchogramSettings.  # noqa: E501
        :type: float
        """

        self._min_echo_length = min_echo_length

    @property
    def max_echo_length(self):
        """Gets the max_echo_length of this TargetsEchogramSettings.  # noqa: E501


        :return: The max_echo_length of this TargetsEchogramSettings.  # noqa: E501
        :rtype: float
        """
        return self._max_echo_length

    @max_echo_length.setter
    def max_echo_length(self, max_echo_length):
        """Sets the max_echo_length of this TargetsEchogramSettings.


        :param max_echo_length: The max_echo_length of this TargetsEchogramSettings.  # noqa: E501
        :type: float
        """

        self._max_echo_length = max_echo_length

    @property
    def max_gain_compensation(self):
        """Gets the max_gain_compensation of this TargetsEchogramSettings.  # noqa: E501


        :return: The max_gain_compensation of this TargetsEchogramSettings.  # noqa: E501
        :rtype: float
        """
        return self._max_gain_compensation

    @max_gain_compensation.setter
    def max_gain_compensation(self, max_gain_compensation):
        """Sets the max_gain_compensation of this TargetsEchogramSettings.


        :param max_gain_compensation: The max_gain_compensation of this TargetsEchogramSettings.  # noqa: E501
        :type: float
        """

        self._max_gain_compensation = max_gain_compensation

    @property
    def max_phase_deviation(self):
        """Gets the max_phase_deviation of this TargetsEchogramSettings.  # noqa: E501


        :return: The max_phase_deviation of this TargetsEchogramSettings.  # noqa: E501
        :rtype: float
        """
        return self._max_phase_deviation

    @max_phase_deviation.setter
    def max_phase_deviation(self, max_phase_deviation):
        """Sets the max_phase_deviation of this TargetsEchogramSettings.


        :param max_phase_deviation: The max_phase_deviation of this TargetsEchogramSettings.  # noqa: E501
        :type: float
        """

        self._max_phase_deviation = max_phase_deviation

    @property
    def compression_type(self):
        """Gets the compression_type of this TargetsEchogramSettings.  # noqa: E501


        :return: The compression_type of this TargetsEchogramSettings.  # noqa: E501
        :rtype: str
        """
        return self._compression_type

    @compression_type.setter
    def compression_type(self, compression_type):
        """Sets the compression_type of this TargetsEchogramSettings.


        :param compression_type: The compression_type of this TargetsEchogramSettings.  # noqa: E501
        :type: str
        """
        if compression_type is None:
            raise ValueError("Invalid value for `compression_type`, must not be `None`")  # noqa: E501
        allowed_values = ["mean", "peak"]  # noqa: E501
        if compression_type not in allowed_values:
            raise ValueError(
                "Invalid value for `compression_type` ({0}), must be one of {1}"  # noqa: E501
                .format(compression_type, allowed_values)
            )

        self._compression_type = compression_type

    @property
    def expansion_type(self):
        """Gets the expansion_type of this TargetsEchogramSettings.  # noqa: E501


        :return: The expansion_type of this TargetsEchogramSettings.  # noqa: E501
        :rtype: str
        """
        return self._expansion_type

    @expansion_type.setter
    def expansion_type(self, expansion_type):
        """Sets the expansion_type of this TargetsEchogramSettings.


        :param expansion_type: The expansion_type of this TargetsEchogramSettings.  # noqa: E501
        :type: str
        """
        if expansion_type is None:
            raise ValueError("Invalid value for `expansion_type`, must not be `None`")  # noqa: E501
        allowed_values = ["interpolate", "copy"]  # noqa: E501
        if expansion_type not in allowed_values:
            raise ValueError(
                "Invalid value for `expansion_type` ({0}), must be one of {1}"  # noqa: E501
                .format(expansion_type, allowed_values)
            )

        self._expansion_type = expansion_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TargetsEchogramSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetsEchogramSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
