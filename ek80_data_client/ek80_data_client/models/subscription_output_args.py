# coding: utf-8

"""
    REST API for setting up data subscriptions on the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # How to start data output  1. Create a subscription  2. Create a communication end point  3. Add the subscription to the communication end point      # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SubscriptionOutputArgs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_id': 'int',
        'data_serialization': 'str'
    }

    attribute_map = {
        'subscription_id': 'subscription-id',
        'data_serialization': 'data-serialization'
    }

    def __init__(self, subscription_id=None, data_serialization=None):  # noqa: E501
        """SubscriptionOutputArgs - a model defined in Swagger"""  # noqa: E501

        self._subscription_id = None
        self._data_serialization = None
        self.discriminator = None

        self.subscription_id = subscription_id
        self.data_serialization = data_serialization

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionOutputArgs.  # noqa: E501


        :return: The subscription_id of this SubscriptionOutputArgs.  # noqa: E501
        :rtype: int
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionOutputArgs.


        :param subscription_id: The subscription_id of this SubscriptionOutputArgs.  # noqa: E501
        :type: int
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")  # noqa: E501

        self._subscription_id = subscription_id

    @property
    def data_serialization(self):
        """Gets the data_serialization of this SubscriptionOutputArgs.  # noqa: E501


        :return: The data_serialization of this SubscriptionOutputArgs.  # noqa: E501
        :rtype: str
        """
        return self._data_serialization

    @data_serialization.setter
    def data_serialization(self, data_serialization):
        """Sets the data_serialization of this SubscriptionOutputArgs.


        :param data_serialization: The data_serialization of this SubscriptionOutputArgs.  # noqa: E501
        :type: str
        """
        if data_serialization is None:
            raise ValueError("Invalid value for `data_serialization`, must not be `None`")  # noqa: E501
        allowed_values = ["c-struct", "proto-buf"]  # noqa: E501
        if data_serialization not in allowed_values:
            raise ValueError(
                "Invalid value for `data_serialization` ({0}), must be one of {1}"  # noqa: E501
                .format(data_serialization, allowed_values)
            )

        self._data_serialization = data_serialization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionOutputArgs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionOutputArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
