# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ek80_param_client.api_client import ApiClient


class TransducerCapabilitiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_adcp_transducer_capabilities(self, **kwargs):  # noqa: E501
        """Get capability information about installed adcp transducers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_adcp_transducer_capabilities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AdcpTransducerCapabilities]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_adcp_transducer_capabilities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_adcp_transducer_capabilities_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_adcp_transducer_capabilities_with_http_info(self, **kwargs):  # noqa: E501
        """Get capability information about installed adcp transducers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_adcp_transducer_capabilities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[AdcpTransducerCapabilities]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_adcp_transducer_capabilities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/transducer-capabilities/adcp-transducers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AdcpTransducerCapabilities]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_array_transducer_capabilities(self, **kwargs):  # noqa: E501
        """Get capability information about installed array transducers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_array_transducer_capabilities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ArrayTransducerCapabilities]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_array_transducer_capabilities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_array_transducer_capabilities_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_array_transducer_capabilities_with_http_info(self, **kwargs):  # noqa: E501
        """Get capability information about installed array transducers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_array_transducer_capabilities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ArrayTransducerCapabilities]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_array_transducer_capabilities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/transducer-capabilities/array-transducers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ArrayTransducerCapabilities]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_split_transducer_capabilities(self, **kwargs):  # noqa: E501
        """Get capability information about installed single split transducers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_split_transducer_capabilities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SingleSplitTransducerCapabilities]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_split_transducer_capabilities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_single_split_transducer_capabilities_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_single_split_transducer_capabilities_with_http_info(self, **kwargs):  # noqa: E501
        """Get capability information about installed single split transducers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_split_transducer_capabilities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SingleSplitTransducerCapabilities]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_split_transducer_capabilities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/transducer-capabilities/single-split-transducers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SingleSplitTransducerCapabilities]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_transducer_capabilities(self, **kwargs):  # noqa: E501
        """Get capability information about installed single transducers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_transducer_capabilities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SingleTransducerCapabilities]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_transducer_capabilities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_single_transducer_capabilities_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_single_transducer_capabilities_with_http_info(self, **kwargs):  # noqa: E501
        """Get capability information about installed single transducers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_transducer_capabilities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SingleTransducerCapabilities]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_transducer_capabilities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/transducer-capabilities/single-transducers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SingleTransducerCapabilities]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transducer_capabilities(self, **kwargs):  # noqa: E501
        """Get general/common information about all installed transducers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transducer_capabilities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TransducerCapabilities]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_transducer_capabilities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_transducer_capabilities_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_transducer_capabilities_with_http_info(self, **kwargs):  # noqa: E501
        """Get general/common information about all installed transducers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_transducer_capabilities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[TransducerCapabilities]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transducer_capabilities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/transducer-capabilities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TransducerCapabilities]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transducer_capabilities_get_transducer_capability(self, channelid, **kwargs):  # noqa: E501
        """Get information about a specific installed transducer capabilities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transducer_capabilities_get_transducer_capability(channelid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str channelid: The virtual channel id (required)
        :return: TransducerCapabilities
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transducer_capabilities_get_transducer_capability_with_http_info(channelid, **kwargs)  # noqa: E501
        else:
            (data) = self.transducer_capabilities_get_transducer_capability_with_http_info(channelid, **kwargs)  # noqa: E501
            return data

    def transducer_capabilities_get_transducer_capability_with_http_info(self, channelid, **kwargs):  # noqa: E501
        """Get information about a specific installed transducer capabilities  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transducer_capabilities_get_transducer_capability_with_http_info(channelid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str channelid: The virtual channel id (required)
        :return: TransducerCapabilities
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channelid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transducer_capabilities_get_transducer_capability" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channelid' is set
        if ('channelid' not in params or
                params['channelid'] is None):
            raise ValueError("Missing the required parameter `channelid` when calling `transducer_capabilities_get_transducer_capability`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channelid' in params:
            path_params['channelid'] = params['channelid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/transducer-capabilities/{channelid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransducerCapabilities',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
