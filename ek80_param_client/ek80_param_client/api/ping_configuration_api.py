# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ek80_param_client.api_client import ApiClient


class PingConfigurationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def ping_configuration_get_channel_pulse_settings(self, channelid, **kwargs):  # noqa: E501
        """Get pulse settings for a specific channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_configuration_get_channel_pulse_settings(channelid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str channelid: The virtual channel id (required)
        :return: PulseSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ping_configuration_get_channel_pulse_settings_with_http_info(channelid, **kwargs)  # noqa: E501
        else:
            (data) = self.ping_configuration_get_channel_pulse_settings_with_http_info(channelid, **kwargs)  # noqa: E501
            return data

    def ping_configuration_get_channel_pulse_settings_with_http_info(self, channelid, **kwargs):  # noqa: E501
        """Get pulse settings for a specific channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_configuration_get_channel_pulse_settings_with_http_info(channelid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str channelid: The virtual channel id (required)
        :return: PulseSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channelid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_configuration_get_channel_pulse_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channelid' is set
        if ('channelid' not in params or
                params['channelid'] is None):
            raise ValueError("Missing the required parameter `channelid` when calling `ping_configuration_get_channel_pulse_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channelid' in params:
            path_params['channelid'] = params['channelid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/ping-configuration/{channelid}/pulse-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PulseSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ping_configuration_get_channel_transmit_power(self, channelid, **kwargs):  # noqa: E501
        """Get transmit power for a specific channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_configuration_get_channel_transmit_power(channelid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str channelid: The virtual channel id (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ping_configuration_get_channel_transmit_power_with_http_info(channelid, **kwargs)  # noqa: E501
        else:
            (data) = self.ping_configuration_get_channel_transmit_power_with_http_info(channelid, **kwargs)  # noqa: E501
            return data

    def ping_configuration_get_channel_transmit_power_with_http_info(self, channelid, **kwargs):  # noqa: E501
        """Get transmit power for a specific channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_configuration_get_channel_transmit_power_with_http_info(channelid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str channelid: The virtual channel id (required)
        :return: float
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channelid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_configuration_get_channel_transmit_power" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channelid' is set
        if ('channelid' not in params or
                params['channelid'] is None):
            raise ValueError("Missing the required parameter `channelid` when calling `ping_configuration_get_channel_transmit_power`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channelid' in params:
            path_params['channelid'] = params['channelid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/ping-configuration/{channelid}/transmit-power', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='float',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ping_configuration_get_channels(self, **kwargs):  # noqa: E501
        """Get information about all installed channels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_configuration_get_channels(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ping_configuration_get_channels_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ping_configuration_get_channels_with_http_info(**kwargs)  # noqa: E501
            return data

    def ping_configuration_get_channels_with_http_info(self, **kwargs):  # noqa: E501
        """Get information about all installed channels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_configuration_get_channels_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_configuration_get_channels" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/ping-configuration/channel-list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ping_configuration_set_channel_pulse_settings(self, channelid, pulse_settings, **kwargs):  # noqa: E501
        """Set pulse settings for a specific channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_configuration_set_channel_pulse_settings(channelid, pulse_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str channelid: The virtual channel id (required)
        :param PulseSettings pulse_settings: A struct giving a set of pulse setting. The struct contains: pulse-type (string)[CW, LFM, LFMD], pulse-duration (double, [s], depending on frequency and pulse-type), start-frequency ([Hz]), end-frequency ( [Hz]),  channel-mode(Active, Passive, test), Ramping (Fast/Slow), filter-type (string) . (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ping_configuration_set_channel_pulse_settings_with_http_info(channelid, pulse_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.ping_configuration_set_channel_pulse_settings_with_http_info(channelid, pulse_settings, **kwargs)  # noqa: E501
            return data

    def ping_configuration_set_channel_pulse_settings_with_http_info(self, channelid, pulse_settings, **kwargs):  # noqa: E501
        """Set pulse settings for a specific channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_configuration_set_channel_pulse_settings_with_http_info(channelid, pulse_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str channelid: The virtual channel id (required)
        :param PulseSettings pulse_settings: A struct giving a set of pulse setting. The struct contains: pulse-type (string)[CW, LFM, LFMD], pulse-duration (double, [s], depending on frequency and pulse-type), start-frequency ([Hz]), end-frequency ( [Hz]),  channel-mode(Active, Passive, test), Ramping (Fast/Slow), filter-type (string) . (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channelid', 'pulse_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_configuration_set_channel_pulse_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channelid' is set
        if ('channelid' not in params or
                params['channelid'] is None):
            raise ValueError("Missing the required parameter `channelid` when calling `ping_configuration_set_channel_pulse_settings`")  # noqa: E501
        # verify the required parameter 'pulse_settings' is set
        if ('pulse_settings' not in params or
                params['pulse_settings'] is None):
            raise ValueError("Missing the required parameter `pulse_settings` when calling `ping_configuration_set_channel_pulse_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channelid' in params:
            path_params['channelid'] = params['channelid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pulse_settings' in params:
            body_params = params['pulse_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/ping-configuration/{channelid}/pulse-settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ping_configuration_set_channel_transmit_power(self, channelid, transmit_power, **kwargs):  # noqa: E501
        """Set transmit power for a specific channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_configuration_set_channel_transmit_power(channelid, transmit_power, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str channelid: The virtual channel id (required)
        :param float transmit_power: The new transmit power in [W] (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ping_configuration_set_channel_transmit_power_with_http_info(channelid, transmit_power, **kwargs)  # noqa: E501
        else:
            (data) = self.ping_configuration_set_channel_transmit_power_with_http_info(channelid, transmit_power, **kwargs)  # noqa: E501
            return data

    def ping_configuration_set_channel_transmit_power_with_http_info(self, channelid, transmit_power, **kwargs):  # noqa: E501
        """Set transmit power for a specific channel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_configuration_set_channel_transmit_power_with_http_info(channelid, transmit_power, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str channelid: The virtual channel id (required)
        :param float transmit_power: The new transmit power in [W] (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channelid', 'transmit_power']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_configuration_set_channel_transmit_power" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'channelid' is set
        if ('channelid' not in params or
                params['channelid'] is None):
            raise ValueError("Missing the required parameter `channelid` when calling `ping_configuration_set_channel_transmit_power`")  # noqa: E501
        # verify the required parameter 'transmit_power' is set
        if ('transmit_power' not in params or
                params['transmit_power'] is None):
            raise ValueError("Missing the required parameter `transmit_power` when calling `ping_configuration_set_channel_transmit_power`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'channelid' in params:
            path_params['channelid'] = params['channelid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transmit_power' in params:
            body_params = params['transmit_power']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/ping-configuration/{channelid}/transmit-power', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ping_ek80_configuration_get_ping_configuration(self, **kwargs):  # noqa: E501
        """Get adcp ping configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_ek80_configuration_get_ping_configuration(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AdcpConfigurationEc150
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ping_ek80_configuration_get_ping_configuration_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ping_ek80_configuration_get_ping_configuration_with_http_info(**kwargs)  # noqa: E501
            return data

    def ping_ek80_configuration_get_ping_configuration_with_http_info(self, **kwargs):  # noqa: E501
        """Get adcp ping configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_ek80_configuration_get_ping_configuration_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AdcpConfigurationEc150
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_ek80_configuration_get_ping_configuration" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/ping-configuration/adcp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdcpConfigurationEc150',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ping_ek80_configuration_get_transceiver_sequencing(self, **kwargs):  # noqa: E501
        """ping_ek80_configuration_get_transceiver_sequencing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_ek80_configuration_get_transceiver_sequencing(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ping_ek80_configuration_get_transceiver_sequencing_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ping_ek80_configuration_get_transceiver_sequencing_with_http_info(**kwargs)  # noqa: E501
            return data

    def ping_ek80_configuration_get_transceiver_sequencing_with_http_info(self, **kwargs):  # noqa: E501
        """ping_ek80_configuration_get_transceiver_sequencing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_ek80_configuration_get_transceiver_sequencing_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_ek80_configuration_get_transceiver_sequencing" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/ping-configuration/sequencing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ping_ek80_configuration_set_ping_configuration(self, adcp_config, **kwargs):  # noqa: E501
        """Set adcp ping configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_ek80_configuration_set_ping_configuration(adcp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpConfigurationEc150 adcp_config: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ping_ek80_configuration_set_ping_configuration_with_http_info(adcp_config, **kwargs)  # noqa: E501
        else:
            (data) = self.ping_ek80_configuration_set_ping_configuration_with_http_info(adcp_config, **kwargs)  # noqa: E501
            return data

    def ping_ek80_configuration_set_ping_configuration_with_http_info(self, adcp_config, **kwargs):  # noqa: E501
        """Set adcp ping configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_ek80_configuration_set_ping_configuration_with_http_info(adcp_config, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AdcpConfigurationEc150 adcp_config: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['adcp_config']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_ek80_configuration_set_ping_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'adcp_config' is set
        if ('adcp_config' not in params or
                params['adcp_config'] is None):
            raise ValueError("Missing the required parameter `adcp_config` when calling `ping_ek80_configuration_set_ping_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'adcp_config' in params:
            body_params = params['adcp_config']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/ping-configuration/adcp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ping_ek80_configuration_set_transceiver_sequencing(self, sequencing, **kwargs):  # noqa: E501
        """ping_ek80_configuration_set_transceiver_sequencing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_ek80_configuration_set_transceiver_sequencing(sequencing, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool sequencing: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ping_ek80_configuration_set_transceiver_sequencing_with_http_info(sequencing, **kwargs)  # noqa: E501
        else:
            (data) = self.ping_ek80_configuration_set_transceiver_sequencing_with_http_info(sequencing, **kwargs)  # noqa: E501
            return data

    def ping_ek80_configuration_set_transceiver_sequencing_with_http_info(self, sequencing, **kwargs):  # noqa: E501
        """ping_ek80_configuration_set_transceiver_sequencing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_ek80_configuration_set_transceiver_sequencing_with_http_info(sequencing, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool sequencing: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sequencing']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_ek80_configuration_set_transceiver_sequencing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sequencing' is set
        if ('sequencing' not in params or
                params['sequencing'] is None):
            raise ValueError("Missing the required parameter `sequencing` when calling `ping_ek80_configuration_set_transceiver_sequencing`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sequencing' in params:
            query_params.append(('sequencing', params['sequencing']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/sounder/ping-configuration/sequencing', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
