# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ek80_param_client.api_client import ApiClient


class OwnshipApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def ownship_get_dimension(self, **kwargs):  # noqa: E501
        """Get ownship dimension settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_dimension(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Dimension
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ownship_get_dimension_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ownship_get_dimension_with_http_info(**kwargs)  # noqa: E501
            return data

    def ownship_get_dimension_with_http_info(self, **kwargs):  # noqa: E501
        """Get ownship dimension settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_dimension_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Dimension
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ownship_get_dimension" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ownship/dimension', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Dimension',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ownship_get_drop_keel_offset(self, **kwargs):  # noqa: E501
        """Get drop keel offset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_drop_keel_offset(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ManualSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ownship_get_drop_keel_offset_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ownship_get_drop_keel_offset_with_http_info(**kwargs)  # noqa: E501
            return data

    def ownship_get_drop_keel_offset_with_http_info(self, **kwargs):  # noqa: E501
        """Get drop keel offset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_drop_keel_offset_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ManualSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ownship_get_drop_keel_offset" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ownship/manual-settings/drop-keel-offset', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManualSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ownship_get_installed_transducers(self, **kwargs):  # noqa: E501
        """Get a list of all installed transducers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_installed_transducers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, Installation)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ownship_get_installed_transducers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ownship_get_installed_transducers_with_http_info(**kwargs)  # noqa: E501
            return data

    def ownship_get_installed_transducers_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all installed transducers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_installed_transducers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, Installation)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ownship_get_installed_transducers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ownship/installation/transducers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, Installation)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ownship_get_manual_settings(self, **kwargs):  # noqa: E501
        """Get a list of all manual settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_manual_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, ManualSetting)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ownship_get_manual_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ownship_get_manual_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def ownship_get_manual_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all manual settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_manual_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: dict(str, ManualSetting)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ownship_get_manual_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ownship/manual-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, ManualSetting)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ownship_get_manual_speed_setting(self, **kwargs):  # noqa: E501
        """Get manual speed settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_manual_speed_setting(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ManualSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ownship_get_manual_speed_setting_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ownship_get_manual_speed_setting_with_http_info(**kwargs)  # noqa: E501
            return data

    def ownship_get_manual_speed_setting_with_http_info(self, **kwargs):  # noqa: E501
        """Get manual speed settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_manual_speed_setting_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ManualSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ownship_get_manual_speed_setting" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ownship/manual-settings/vessel-speed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManualSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ownship_get_motion(self, **kwargs):  # noqa: E501
        """Get ownship motion settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_motion(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MotionData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ownship_get_motion_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ownship_get_motion_with_http_info(**kwargs)  # noqa: E501
            return data

    def ownship_get_motion_with_http_info(self, **kwargs):  # noqa: E501
        """Get ownship motion settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_motion_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MotionData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ownship_get_motion" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ownship/motion', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MotionData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ownship_get_navigation(self, **kwargs):  # noqa: E501
        """Get ownship navigation settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_navigation(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NavigationData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ownship_get_navigation_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ownship_get_navigation_with_http_info(**kwargs)  # noqa: E501
            return data

    def ownship_get_navigation_with_http_info(self, **kwargs):  # noqa: E501
        """Get ownship navigation settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_navigation_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NavigationData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ownship_get_navigation" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ownship/navigation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NavigationData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ownship_get_ownship(self, **kwargs):  # noqa: E501
        """Get ownship settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_ownship(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Ownship
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ownship_get_ownship_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ownship_get_ownship_with_http_info(**kwargs)  # noqa: E501
            return data

    def ownship_get_ownship_with_http_info(self, **kwargs):  # noqa: E501
        """Get ownship settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_ownship_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Ownship
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ownship_get_ownship" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ownship', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Ownship',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ownship_get_water_level(self, **kwargs):  # noqa: E501
        """Get water level offset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_water_level(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ManualSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ownship_get_water_level_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.ownship_get_water_level_with_http_info(**kwargs)  # noqa: E501
            return data

    def ownship_get_water_level_with_http_info(self, **kwargs):  # noqa: E501
        """Get water level offset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_get_water_level_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ManualSetting
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ownship_get_water_level" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ownship/manual-settings/water-level', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManualSetting',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ownship_set_drop_keel_offset(self, dropkeel_settings, **kwargs):  # noqa: E501
        """Set drop keel offset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_set_drop_keel_offset(dropkeel_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManualSetting dropkeel_settings: The new offset value and IsManual flag. New value only takes effect if IsManual is true (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ownship_set_drop_keel_offset_with_http_info(dropkeel_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.ownship_set_drop_keel_offset_with_http_info(dropkeel_settings, **kwargs)  # noqa: E501
            return data

    def ownship_set_drop_keel_offset_with_http_info(self, dropkeel_settings, **kwargs):  # noqa: E501
        """Set drop keel offset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_set_drop_keel_offset_with_http_info(dropkeel_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManualSetting dropkeel_settings: The new offset value and IsManual flag. New value only takes effect if IsManual is true (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dropkeel_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ownship_set_drop_keel_offset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dropkeel_settings' is set
        if ('dropkeel_settings' not in params or
                params['dropkeel_settings'] is None):
            raise ValueError("Missing the required parameter `dropkeel_settings` when calling `ownship_set_drop_keel_offset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dropkeel_settings' in params:
            body_params = params['dropkeel_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ownship/manual-settings/drop-keel-offset', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ownship_set_manual_speed_setting(self, speed_settings, **kwargs):  # noqa: E501
        """Set manual speed setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_set_manual_speed_setting(speed_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManualSetting speed_settings: The new vessel speed value and IsManual flag. New value only takes effect if IsManual is true (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ownship_set_manual_speed_setting_with_http_info(speed_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.ownship_set_manual_speed_setting_with_http_info(speed_settings, **kwargs)  # noqa: E501
            return data

    def ownship_set_manual_speed_setting_with_http_info(self, speed_settings, **kwargs):  # noqa: E501
        """Set manual speed setting  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_set_manual_speed_setting_with_http_info(speed_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManualSetting speed_settings: The new vessel speed value and IsManual flag. New value only takes effect if IsManual is true (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['speed_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ownship_set_manual_speed_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'speed_settings' is set
        if ('speed_settings' not in params or
                params['speed_settings'] is None):
            raise ValueError("Missing the required parameter `speed_settings` when calling `ownship_set_manual_speed_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'speed_settings' in params:
            body_params = params['speed_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ownship/manual-settings/vessel-speed', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ownship_set_transducer_installation(self, transducer_id, installation, **kwargs):  # noqa: E501
        """Sets a new intallation for a given transducer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_set_transducer_installation(transducer_id, installation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transducer_id: Custom Name of the transducer to be updated (required)
        :param Installation installation: The new installation struct for the specified transducer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ownship_set_transducer_installation_with_http_info(transducer_id, installation, **kwargs)  # noqa: E501
        else:
            (data) = self.ownship_set_transducer_installation_with_http_info(transducer_id, installation, **kwargs)  # noqa: E501
            return data

    def ownship_set_transducer_installation_with_http_info(self, transducer_id, installation, **kwargs):  # noqa: E501
        """Sets a new intallation for a given transducer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_set_transducer_installation_with_http_info(transducer_id, installation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str transducer_id: Custom Name of the transducer to be updated (required)
        :param Installation installation: The new installation struct for the specified transducer (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transducer_id', 'installation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ownship_set_transducer_installation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'transducer_id' is set
        if ('transducer_id' not in params or
                params['transducer_id'] is None):
            raise ValueError("Missing the required parameter `transducer_id` when calling `ownship_set_transducer_installation`")  # noqa: E501
        # verify the required parameter 'installation' is set
        if ('installation' not in params or
                params['installation'] is None):
            raise ValueError("Missing the required parameter `installation` when calling `ownship_set_transducer_installation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'transducer_id' in params:
            path_params['transducerId'] = params['transducer_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'installation' in params:
            body_params = params['installation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ownship/installation/{transducerId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ownship_set_water_level(self, water_level_settings, **kwargs):  # noqa: E501
        """Set water level offset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_set_water_level(water_level_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManualSetting water_level_settings: The new water level offset value and IsManual flag. New value only takes effect if IsManual is true (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ownship_set_water_level_with_http_info(water_level_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.ownship_set_water_level_with_http_info(water_level_settings, **kwargs)  # noqa: E501
            return data

    def ownship_set_water_level_with_http_info(self, water_level_settings, **kwargs):  # noqa: E501
        """Set water level offset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ownship_set_water_level_with_http_info(water_level_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ManualSetting water_level_settings: The new water level offset value and IsManual flag. New value only takes effect if IsManual is true (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['water_level_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ownship_set_water_level" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'water_level_settings' is set
        if ('water_level_settings' not in params or
                params['water_level_settings'] is None):
            raise ValueError("Missing the required parameter `water_level_settings` when calling `ownship_set_water_level`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'water_level_settings' in params:
            body_params = params['water_level_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ownship/manual-settings/water-level', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
