# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SamplingInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'decimation': 'int',
        'rx_band_width': 'float',
        'sample_interval': 'float'
    }

    attribute_map = {
        'decimation': 'decimation',
        'rx_band_width': 'rx-band-width',
        'sample_interval': 'sample-interval'
    }

    def __init__(self, decimation=None, rx_band_width=None, sample_interval=None):  # noqa: E501
        """SamplingInfo - a model defined in Swagger"""  # noqa: E501

        self._decimation = None
        self._rx_band_width = None
        self._sample_interval = None
        self.discriminator = None

        if decimation is not None:
            self.decimation = decimation
        if rx_band_width is not None:
            self.rx_band_width = rx_band_width
        if sample_interval is not None:
            self.sample_interval = sample_interval

    @property
    def decimation(self):
        """Gets the decimation of this SamplingInfo.  # noqa: E501


        :return: The decimation of this SamplingInfo.  # noqa: E501
        :rtype: int
        """
        return self._decimation

    @decimation.setter
    def decimation(self, decimation):
        """Sets the decimation of this SamplingInfo.


        :param decimation: The decimation of this SamplingInfo.  # noqa: E501
        :type: int
        """

        self._decimation = decimation

    @property
    def rx_band_width(self):
        """Gets the rx_band_width of this SamplingInfo.  # noqa: E501


        :return: The rx_band_width of this SamplingInfo.  # noqa: E501
        :rtype: float
        """
        return self._rx_band_width

    @rx_band_width.setter
    def rx_band_width(self, rx_band_width):
        """Sets the rx_band_width of this SamplingInfo.


        :param rx_band_width: The rx_band_width of this SamplingInfo.  # noqa: E501
        :type: float
        """

        self._rx_band_width = rx_band_width

    @property
    def sample_interval(self):
        """Gets the sample_interval of this SamplingInfo.  # noqa: E501


        :return: The sample_interval of this SamplingInfo.  # noqa: E501
        :rtype: float
        """
        return self._sample_interval

    @sample_interval.setter
    def sample_interval(self, sample_interval):
        """Sets the sample_interval of this SamplingInfo.


        :param sample_interval: The sample_interval of this SamplingInfo.  # noqa: E501
        :type: float
        """

        self._sample_interval = sample_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SamplingInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SamplingInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
