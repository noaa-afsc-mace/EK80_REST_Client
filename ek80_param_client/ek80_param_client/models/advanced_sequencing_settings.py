# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AdvancedSequencingSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sequences': 'list[Sequence]',
        'ensembles': 'list[Ensemble]',
        'ping_groups': 'list[PingGroup]',
        'pings': 'list[PingSequence]'
    }

    attribute_map = {
        'sequences': 'sequences',
        'ensembles': 'ensembles',
        'ping_groups': 'ping-groups',
        'pings': 'pings'
    }

    def __init__(self, sequences=None, ensembles=None, ping_groups=None, pings=None):  # noqa: E501
        """AdvancedSequencingSettings - a model defined in Swagger"""  # noqa: E501

        self._sequences = None
        self._ensembles = None
        self._ping_groups = None
        self._pings = None
        self.discriminator = None

        if sequences is not None:
            self.sequences = sequences
        if ensembles is not None:
            self.ensembles = ensembles
        if ping_groups is not None:
            self.ping_groups = ping_groups
        if pings is not None:
            self.pings = pings

    @property
    def sequences(self):
        """Gets the sequences of this AdvancedSequencingSettings.  # noqa: E501


        :return: The sequences of this AdvancedSequencingSettings.  # noqa: E501
        :rtype: list[Sequence]
        """
        return self._sequences

    @sequences.setter
    def sequences(self, sequences):
        """Sets the sequences of this AdvancedSequencingSettings.


        :param sequences: The sequences of this AdvancedSequencingSettings.  # noqa: E501
        :type: list[Sequence]
        """

        self._sequences = sequences

    @property
    def ensembles(self):
        """Gets the ensembles of this AdvancedSequencingSettings.  # noqa: E501


        :return: The ensembles of this AdvancedSequencingSettings.  # noqa: E501
        :rtype: list[Ensemble]
        """
        return self._ensembles

    @ensembles.setter
    def ensembles(self, ensembles):
        """Sets the ensembles of this AdvancedSequencingSettings.


        :param ensembles: The ensembles of this AdvancedSequencingSettings.  # noqa: E501
        :type: list[Ensemble]
        """

        self._ensembles = ensembles

    @property
    def ping_groups(self):
        """Gets the ping_groups of this AdvancedSequencingSettings.  # noqa: E501


        :return: The ping_groups of this AdvancedSequencingSettings.  # noqa: E501
        :rtype: list[PingGroup]
        """
        return self._ping_groups

    @ping_groups.setter
    def ping_groups(self, ping_groups):
        """Sets the ping_groups of this AdvancedSequencingSettings.


        :param ping_groups: The ping_groups of this AdvancedSequencingSettings.  # noqa: E501
        :type: list[PingGroup]
        """

        self._ping_groups = ping_groups

    @property
    def pings(self):
        """Gets the pings of this AdvancedSequencingSettings.  # noqa: E501


        :return: The pings of this AdvancedSequencingSettings.  # noqa: E501
        :rtype: list[PingSequence]
        """
        return self._pings

    @pings.setter
    def pings(self, pings):
        """Sets the pings of this AdvancedSequencingSettings.


        :param pings: The pings of this AdvancedSequencingSettings.  # noqa: E501
        :type: list[PingSequence]
        """

        self._pings = pings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdvancedSequencingSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdvancedSequencingSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
