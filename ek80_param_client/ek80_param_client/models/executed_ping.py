# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExecutedPing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ping_information': 'PingInformation',
        'ping_configuration': 'PingConfiguration'
    }

    attribute_map = {
        'ping_information': 'ping-information',
        'ping_configuration': 'ping-configuration'
    }

    def __init__(self, ping_information=None, ping_configuration=None):  # noqa: E501
        """ExecutedPing - a model defined in Swagger"""  # noqa: E501

        self._ping_information = None
        self._ping_configuration = None
        self.discriminator = None

        if ping_information is not None:
            self.ping_information = ping_information
        if ping_configuration is not None:
            self.ping_configuration = ping_configuration

    @property
    def ping_information(self):
        """Gets the ping_information of this ExecutedPing.  # noqa: E501


        :return: The ping_information of this ExecutedPing.  # noqa: E501
        :rtype: PingInformation
        """
        return self._ping_information

    @ping_information.setter
    def ping_information(self, ping_information):
        """Sets the ping_information of this ExecutedPing.


        :param ping_information: The ping_information of this ExecutedPing.  # noqa: E501
        :type: PingInformation
        """

        self._ping_information = ping_information

    @property
    def ping_configuration(self):
        """Gets the ping_configuration of this ExecutedPing.  # noqa: E501


        :return: The ping_configuration of this ExecutedPing.  # noqa: E501
        :rtype: PingConfiguration
        """
        return self._ping_configuration

    @ping_configuration.setter
    def ping_configuration(self, ping_configuration):
        """Sets the ping_configuration of this ExecutedPing.


        :param ping_configuration: The ping_configuration of this ExecutedPing.  # noqa: E501
        :type: PingConfiguration
        """

        self._ping_configuration = ping_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExecutedPing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecutedPing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
