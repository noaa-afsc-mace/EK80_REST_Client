# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Ping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_id': 'str',
        'ping_name': 'str',
        'tx_power': 'float',
        'tx_gain': 'float',
        'tx_geometry': 'SectorGeometry',
        'pulse': 'PulseSetting',
        'channel_mode': 'str',
        'transducer_name': 'str'
    }

    attribute_map = {
        'channel_id': 'channel-id',
        'ping_name': 'ping-name',
        'tx_power': 'tx-power',
        'tx_gain': 'tx-gain',
        'tx_geometry': 'tx-geometry',
        'pulse': 'pulse',
        'channel_mode': 'channel-mode',
        'transducer_name': 'transducer-name'
    }

    def __init__(self, channel_id=None, ping_name=None, tx_power=None, tx_gain=None, tx_geometry=None, pulse=None, channel_mode=None, transducer_name=None):  # noqa: E501
        """Ping - a model defined in Swagger"""  # noqa: E501

        self._channel_id = None
        self._ping_name = None
        self._tx_power = None
        self._tx_gain = None
        self._tx_geometry = None
        self._pulse = None
        self._channel_mode = None
        self._transducer_name = None
        self.discriminator = None

        if channel_id is not None:
            self.channel_id = channel_id
        if ping_name is not None:
            self.ping_name = ping_name
        if tx_power is not None:
            self.tx_power = tx_power
        if tx_gain is not None:
            self.tx_gain = tx_gain
        if tx_geometry is not None:
            self.tx_geometry = tx_geometry
        if pulse is not None:
            self.pulse = pulse
        if channel_mode is not None:
            self.channel_mode = channel_mode
        if transducer_name is not None:
            self.transducer_name = transducer_name

    @property
    def channel_id(self):
        """Gets the channel_id of this Ping.  # noqa: E501


        :return: The channel_id of this Ping.  # noqa: E501
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this Ping.


        :param channel_id: The channel_id of this Ping.  # noqa: E501
        :type: str
        """

        self._channel_id = channel_id

    @property
    def ping_name(self):
        """Gets the ping_name of this Ping.  # noqa: E501


        :return: The ping_name of this Ping.  # noqa: E501
        :rtype: str
        """
        return self._ping_name

    @ping_name.setter
    def ping_name(self, ping_name):
        """Sets the ping_name of this Ping.


        :param ping_name: The ping_name of this Ping.  # noqa: E501
        :type: str
        """

        self._ping_name = ping_name

    @property
    def tx_power(self):
        """Gets the tx_power of this Ping.  # noqa: E501


        :return: The tx_power of this Ping.  # noqa: E501
        :rtype: float
        """
        return self._tx_power

    @tx_power.setter
    def tx_power(self, tx_power):
        """Sets the tx_power of this Ping.


        :param tx_power: The tx_power of this Ping.  # noqa: E501
        :type: float
        """

        self._tx_power = tx_power

    @property
    def tx_gain(self):
        """Gets the tx_gain of this Ping.  # noqa: E501


        :return: The tx_gain of this Ping.  # noqa: E501
        :rtype: float
        """
        return self._tx_gain

    @tx_gain.setter
    def tx_gain(self, tx_gain):
        """Sets the tx_gain of this Ping.


        :param tx_gain: The tx_gain of this Ping.  # noqa: E501
        :type: float
        """

        self._tx_gain = tx_gain

    @property
    def tx_geometry(self):
        """Gets the tx_geometry of this Ping.  # noqa: E501


        :return: The tx_geometry of this Ping.  # noqa: E501
        :rtype: SectorGeometry
        """
        return self._tx_geometry

    @tx_geometry.setter
    def tx_geometry(self, tx_geometry):
        """Sets the tx_geometry of this Ping.


        :param tx_geometry: The tx_geometry of this Ping.  # noqa: E501
        :type: SectorGeometry
        """

        self._tx_geometry = tx_geometry

    @property
    def pulse(self):
        """Gets the pulse of this Ping.  # noqa: E501


        :return: The pulse of this Ping.  # noqa: E501
        :rtype: PulseSetting
        """
        return self._pulse

    @pulse.setter
    def pulse(self, pulse):
        """Sets the pulse of this Ping.


        :param pulse: The pulse of this Ping.  # noqa: E501
        :type: PulseSetting
        """

        self._pulse = pulse

    @property
    def channel_mode(self):
        """Gets the channel_mode of this Ping.  # noqa: E501


        :return: The channel_mode of this Ping.  # noqa: E501
        :rtype: str
        """
        return self._channel_mode

    @channel_mode.setter
    def channel_mode(self, channel_mode):
        """Sets the channel_mode of this Ping.


        :param channel_mode: The channel_mode of this Ping.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "passive", "test"]  # noqa: E501
        if channel_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(channel_mode, allowed_values)
            )

        self._channel_mode = channel_mode

    @property
    def transducer_name(self):
        """Gets the transducer_name of this Ping.  # noqa: E501


        :return: The transducer_name of this Ping.  # noqa: E501
        :rtype: str
        """
        return self._transducer_name

    @transducer_name.setter
    def transducer_name(self, transducer_name):
        """Sets the transducer_name of this Ping.


        :param transducer_name: The transducer_name of this Ping.  # noqa: E501
        :type: str
        """

        self._transducer_name = transducer_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
