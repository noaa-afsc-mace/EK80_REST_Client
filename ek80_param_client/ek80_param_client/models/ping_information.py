# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PingInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ping_number': 'int',
        'ping_time': 'int',
        'latitude': 'float',
        'longitude': 'float',
        'vessel_depth': 'float',
        'vessel_distance': 'float',
        'speed': 'float',
        'heading': 'float',
        'heave': 'float',
        'roll': 'float',
        'pitch': 'float',
        'sound_velocity': 'float'
    }

    attribute_map = {
        'ping_number': 'ping-number',
        'ping_time': 'ping-time',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'vessel_depth': 'vessel-depth',
        'vessel_distance': 'vessel-distance',
        'speed': 'speed',
        'heading': 'heading',
        'heave': 'heave',
        'roll': 'roll',
        'pitch': 'pitch',
        'sound_velocity': 'sound-velocity'
    }

    def __init__(self, ping_number=None, ping_time=None, latitude=None, longitude=None, vessel_depth=None, vessel_distance=None, speed=None, heading=None, heave=None, roll=None, pitch=None, sound_velocity=None):  # noqa: E501
        """PingInformation - a model defined in Swagger"""  # noqa: E501

        self._ping_number = None
        self._ping_time = None
        self._latitude = None
        self._longitude = None
        self._vessel_depth = None
        self._vessel_distance = None
        self._speed = None
        self._heading = None
        self._heave = None
        self._roll = None
        self._pitch = None
        self._sound_velocity = None
        self.discriminator = None

        if ping_number is not None:
            self.ping_number = ping_number
        if ping_time is not None:
            self.ping_time = ping_time
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if vessel_depth is not None:
            self.vessel_depth = vessel_depth
        if vessel_distance is not None:
            self.vessel_distance = vessel_distance
        if speed is not None:
            self.speed = speed
        if heading is not None:
            self.heading = heading
        if heave is not None:
            self.heave = heave
        if roll is not None:
            self.roll = roll
        if pitch is not None:
            self.pitch = pitch
        if sound_velocity is not None:
            self.sound_velocity = sound_velocity

    @property
    def ping_number(self):
        """Gets the ping_number of this PingInformation.  # noqa: E501


        :return: The ping_number of this PingInformation.  # noqa: E501
        :rtype: int
        """
        return self._ping_number

    @ping_number.setter
    def ping_number(self, ping_number):
        """Sets the ping_number of this PingInformation.


        :param ping_number: The ping_number of this PingInformation.  # noqa: E501
        :type: int
        """

        self._ping_number = ping_number

    @property
    def ping_time(self):
        """Gets the ping_time of this PingInformation.  # noqa: E501


        :return: The ping_time of this PingInformation.  # noqa: E501
        :rtype: int
        """
        return self._ping_time

    @ping_time.setter
    def ping_time(self, ping_time):
        """Sets the ping_time of this PingInformation.


        :param ping_time: The ping_time of this PingInformation.  # noqa: E501
        :type: int
        """

        self._ping_time = ping_time

    @property
    def latitude(self):
        """Gets the latitude of this PingInformation.  # noqa: E501


        :return: The latitude of this PingInformation.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this PingInformation.


        :param latitude: The latitude of this PingInformation.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this PingInformation.  # noqa: E501


        :return: The longitude of this PingInformation.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this PingInformation.


        :param longitude: The longitude of this PingInformation.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def vessel_depth(self):
        """Gets the vessel_depth of this PingInformation.  # noqa: E501


        :return: The vessel_depth of this PingInformation.  # noqa: E501
        :rtype: float
        """
        return self._vessel_depth

    @vessel_depth.setter
    def vessel_depth(self, vessel_depth):
        """Sets the vessel_depth of this PingInformation.


        :param vessel_depth: The vessel_depth of this PingInformation.  # noqa: E501
        :type: float
        """

        self._vessel_depth = vessel_depth

    @property
    def vessel_distance(self):
        """Gets the vessel_distance of this PingInformation.  # noqa: E501


        :return: The vessel_distance of this PingInformation.  # noqa: E501
        :rtype: float
        """
        return self._vessel_distance

    @vessel_distance.setter
    def vessel_distance(self, vessel_distance):
        """Sets the vessel_distance of this PingInformation.


        :param vessel_distance: The vessel_distance of this PingInformation.  # noqa: E501
        :type: float
        """

        self._vessel_distance = vessel_distance

    @property
    def speed(self):
        """Gets the speed of this PingInformation.  # noqa: E501


        :return: The speed of this PingInformation.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this PingInformation.


        :param speed: The speed of this PingInformation.  # noqa: E501
        :type: float
        """

        self._speed = speed

    @property
    def heading(self):
        """Gets the heading of this PingInformation.  # noqa: E501


        :return: The heading of this PingInformation.  # noqa: E501
        :rtype: float
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this PingInformation.


        :param heading: The heading of this PingInformation.  # noqa: E501
        :type: float
        """

        self._heading = heading

    @property
    def heave(self):
        """Gets the heave of this PingInformation.  # noqa: E501


        :return: The heave of this PingInformation.  # noqa: E501
        :rtype: float
        """
        return self._heave

    @heave.setter
    def heave(self, heave):
        """Sets the heave of this PingInformation.


        :param heave: The heave of this PingInformation.  # noqa: E501
        :type: float
        """

        self._heave = heave

    @property
    def roll(self):
        """Gets the roll of this PingInformation.  # noqa: E501


        :return: The roll of this PingInformation.  # noqa: E501
        :rtype: float
        """
        return self._roll

    @roll.setter
    def roll(self, roll):
        """Sets the roll of this PingInformation.


        :param roll: The roll of this PingInformation.  # noqa: E501
        :type: float
        """

        self._roll = roll

    @property
    def pitch(self):
        """Gets the pitch of this PingInformation.  # noqa: E501


        :return: The pitch of this PingInformation.  # noqa: E501
        :rtype: float
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch):
        """Sets the pitch of this PingInformation.


        :param pitch: The pitch of this PingInformation.  # noqa: E501
        :type: float
        """

        self._pitch = pitch

    @property
    def sound_velocity(self):
        """Gets the sound_velocity of this PingInformation.  # noqa: E501


        :return: The sound_velocity of this PingInformation.  # noqa: E501
        :rtype: float
        """
        return self._sound_velocity

    @sound_velocity.setter
    def sound_velocity(self, sound_velocity):
        """Sets the sound_velocity of this PingInformation.


        :param sound_velocity: The sound_velocity of this PingInformation.  # noqa: E501
        :type: float
        """

        self._sound_velocity = sound_velocity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PingInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PingInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
