# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IndividualRangeControl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_id': 'str',
        'individual_channel_range': 'float',
        'individual_channel_auto': 'bool'
    }

    attribute_map = {
        'channel_id': 'channel-id',
        'individual_channel_range': 'individual-channel-range',
        'individual_channel_auto': 'individual-channel-auto'
    }

    def __init__(self, channel_id=None, individual_channel_range=None, individual_channel_auto=None):  # noqa: E501
        """IndividualRangeControl - a model defined in Swagger"""  # noqa: E501

        self._channel_id = None
        self._individual_channel_range = None
        self._individual_channel_auto = None
        self.discriminator = None

        if channel_id is not None:
            self.channel_id = channel_id
        if individual_channel_range is not None:
            self.individual_channel_range = individual_channel_range
        if individual_channel_auto is not None:
            self.individual_channel_auto = individual_channel_auto

    @property
    def channel_id(self):
        """Gets the channel_id of this IndividualRangeControl.  # noqa: E501


        :return: The channel_id of this IndividualRangeControl.  # noqa: E501
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this IndividualRangeControl.


        :param channel_id: The channel_id of this IndividualRangeControl.  # noqa: E501
        :type: str
        """

        self._channel_id = channel_id

    @property
    def individual_channel_range(self):
        """Gets the individual_channel_range of this IndividualRangeControl.  # noqa: E501


        :return: The individual_channel_range of this IndividualRangeControl.  # noqa: E501
        :rtype: float
        """
        return self._individual_channel_range

    @individual_channel_range.setter
    def individual_channel_range(self, individual_channel_range):
        """Sets the individual_channel_range of this IndividualRangeControl.


        :param individual_channel_range: The individual_channel_range of this IndividualRangeControl.  # noqa: E501
        :type: float
        """

        self._individual_channel_range = individual_channel_range

    @property
    def individual_channel_auto(self):
        """Gets the individual_channel_auto of this IndividualRangeControl.  # noqa: E501


        :return: The individual_channel_auto of this IndividualRangeControl.  # noqa: E501
        :rtype: bool
        """
        return self._individual_channel_auto

    @individual_channel_auto.setter
    def individual_channel_auto(self, individual_channel_auto):
        """Sets the individual_channel_auto of this IndividualRangeControl.


        :param individual_channel_auto: The individual_channel_auto of this IndividualRangeControl.  # noqa: E501
        :type: bool
        """

        self._individual_channel_auto = individual_channel_auto

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndividualRangeControl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndividualRangeControl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
