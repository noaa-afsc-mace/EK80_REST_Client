# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProcessingAdcp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_velocity_limit': 'float',
        'is_error_velocity_limit_active': 'bool',
        'correlation_limit_percentage': 'float',
        'is_correlation_limit_percentage_active': 'bool',
        'min_quality_average_data_percentage': 'float',
        'is_min_quality_average_data_factor_active': 'bool',
        'sv_d_b_low_limit': 'int',
        'is_sv_d_b_low_limit_active': 'bool',
        'sv_d_b_high_limit': 'int',
        'is_sv_d_b_high_limit_active': 'bool',
        'use_epoch_time': 'bool'
    }

    attribute_map = {
        'error_velocity_limit': 'error-velocity-limit',
        'is_error_velocity_limit_active': 'is-error-velocity-limit-active',
        'correlation_limit_percentage': 'correlation-limit-percentage',
        'is_correlation_limit_percentage_active': 'is-correlation-limit-percentage-active',
        'min_quality_average_data_percentage': 'min-quality-average-data-percentage',
        'is_min_quality_average_data_factor_active': 'is-min-quality-average-data-factor-active',
        'sv_d_b_low_limit': 'sv-dB-low-limit',
        'is_sv_d_b_low_limit_active': 'is-sv-dB-low-limit-active',
        'sv_d_b_high_limit': 'sv-dB-high-limit',
        'is_sv_d_b_high_limit_active': 'is-sv-dB-high-limit-active',
        'use_epoch_time': 'use-epoch-time'
    }

    def __init__(self, error_velocity_limit=None, is_error_velocity_limit_active=None, correlation_limit_percentage=None, is_correlation_limit_percentage_active=None, min_quality_average_data_percentage=None, is_min_quality_average_data_factor_active=None, sv_d_b_low_limit=None, is_sv_d_b_low_limit_active=None, sv_d_b_high_limit=None, is_sv_d_b_high_limit_active=None, use_epoch_time=None):  # noqa: E501
        """ProcessingAdcp - a model defined in Swagger"""  # noqa: E501

        self._error_velocity_limit = None
        self._is_error_velocity_limit_active = None
        self._correlation_limit_percentage = None
        self._is_correlation_limit_percentage_active = None
        self._min_quality_average_data_percentage = None
        self._is_min_quality_average_data_factor_active = None
        self._sv_d_b_low_limit = None
        self._is_sv_d_b_low_limit_active = None
        self._sv_d_b_high_limit = None
        self._is_sv_d_b_high_limit_active = None
        self._use_epoch_time = None
        self.discriminator = None

        if error_velocity_limit is not None:
            self.error_velocity_limit = error_velocity_limit
        if is_error_velocity_limit_active is not None:
            self.is_error_velocity_limit_active = is_error_velocity_limit_active
        if correlation_limit_percentage is not None:
            self.correlation_limit_percentage = correlation_limit_percentage
        if is_correlation_limit_percentage_active is not None:
            self.is_correlation_limit_percentage_active = is_correlation_limit_percentage_active
        if min_quality_average_data_percentage is not None:
            self.min_quality_average_data_percentage = min_quality_average_data_percentage
        if is_min_quality_average_data_factor_active is not None:
            self.is_min_quality_average_data_factor_active = is_min_quality_average_data_factor_active
        if sv_d_b_low_limit is not None:
            self.sv_d_b_low_limit = sv_d_b_low_limit
        if is_sv_d_b_low_limit_active is not None:
            self.is_sv_d_b_low_limit_active = is_sv_d_b_low_limit_active
        if sv_d_b_high_limit is not None:
            self.sv_d_b_high_limit = sv_d_b_high_limit
        if is_sv_d_b_high_limit_active is not None:
            self.is_sv_d_b_high_limit_active = is_sv_d_b_high_limit_active
        if use_epoch_time is not None:
            self.use_epoch_time = use_epoch_time

    @property
    def error_velocity_limit(self):
        """Gets the error_velocity_limit of this ProcessingAdcp.  # noqa: E501


        :return: The error_velocity_limit of this ProcessingAdcp.  # noqa: E501
        :rtype: float
        """
        return self._error_velocity_limit

    @error_velocity_limit.setter
    def error_velocity_limit(self, error_velocity_limit):
        """Sets the error_velocity_limit of this ProcessingAdcp.


        :param error_velocity_limit: The error_velocity_limit of this ProcessingAdcp.  # noqa: E501
        :type: float
        """

        self._error_velocity_limit = error_velocity_limit

    @property
    def is_error_velocity_limit_active(self):
        """Gets the is_error_velocity_limit_active of this ProcessingAdcp.  # noqa: E501


        :return: The is_error_velocity_limit_active of this ProcessingAdcp.  # noqa: E501
        :rtype: bool
        """
        return self._is_error_velocity_limit_active

    @is_error_velocity_limit_active.setter
    def is_error_velocity_limit_active(self, is_error_velocity_limit_active):
        """Sets the is_error_velocity_limit_active of this ProcessingAdcp.


        :param is_error_velocity_limit_active: The is_error_velocity_limit_active of this ProcessingAdcp.  # noqa: E501
        :type: bool
        """

        self._is_error_velocity_limit_active = is_error_velocity_limit_active

    @property
    def correlation_limit_percentage(self):
        """Gets the correlation_limit_percentage of this ProcessingAdcp.  # noqa: E501


        :return: The correlation_limit_percentage of this ProcessingAdcp.  # noqa: E501
        :rtype: float
        """
        return self._correlation_limit_percentage

    @correlation_limit_percentage.setter
    def correlation_limit_percentage(self, correlation_limit_percentage):
        """Sets the correlation_limit_percentage of this ProcessingAdcp.


        :param correlation_limit_percentage: The correlation_limit_percentage of this ProcessingAdcp.  # noqa: E501
        :type: float
        """

        self._correlation_limit_percentage = correlation_limit_percentage

    @property
    def is_correlation_limit_percentage_active(self):
        """Gets the is_correlation_limit_percentage_active of this ProcessingAdcp.  # noqa: E501


        :return: The is_correlation_limit_percentage_active of this ProcessingAdcp.  # noqa: E501
        :rtype: bool
        """
        return self._is_correlation_limit_percentage_active

    @is_correlation_limit_percentage_active.setter
    def is_correlation_limit_percentage_active(self, is_correlation_limit_percentage_active):
        """Sets the is_correlation_limit_percentage_active of this ProcessingAdcp.


        :param is_correlation_limit_percentage_active: The is_correlation_limit_percentage_active of this ProcessingAdcp.  # noqa: E501
        :type: bool
        """

        self._is_correlation_limit_percentage_active = is_correlation_limit_percentage_active

    @property
    def min_quality_average_data_percentage(self):
        """Gets the min_quality_average_data_percentage of this ProcessingAdcp.  # noqa: E501


        :return: The min_quality_average_data_percentage of this ProcessingAdcp.  # noqa: E501
        :rtype: float
        """
        return self._min_quality_average_data_percentage

    @min_quality_average_data_percentage.setter
    def min_quality_average_data_percentage(self, min_quality_average_data_percentage):
        """Sets the min_quality_average_data_percentage of this ProcessingAdcp.


        :param min_quality_average_data_percentage: The min_quality_average_data_percentage of this ProcessingAdcp.  # noqa: E501
        :type: float
        """

        self._min_quality_average_data_percentage = min_quality_average_data_percentage

    @property
    def is_min_quality_average_data_factor_active(self):
        """Gets the is_min_quality_average_data_factor_active of this ProcessingAdcp.  # noqa: E501


        :return: The is_min_quality_average_data_factor_active of this ProcessingAdcp.  # noqa: E501
        :rtype: bool
        """
        return self._is_min_quality_average_data_factor_active

    @is_min_quality_average_data_factor_active.setter
    def is_min_quality_average_data_factor_active(self, is_min_quality_average_data_factor_active):
        """Sets the is_min_quality_average_data_factor_active of this ProcessingAdcp.


        :param is_min_quality_average_data_factor_active: The is_min_quality_average_data_factor_active of this ProcessingAdcp.  # noqa: E501
        :type: bool
        """

        self._is_min_quality_average_data_factor_active = is_min_quality_average_data_factor_active

    @property
    def sv_d_b_low_limit(self):
        """Gets the sv_d_b_low_limit of this ProcessingAdcp.  # noqa: E501


        :return: The sv_d_b_low_limit of this ProcessingAdcp.  # noqa: E501
        :rtype: int
        """
        return self._sv_d_b_low_limit

    @sv_d_b_low_limit.setter
    def sv_d_b_low_limit(self, sv_d_b_low_limit):
        """Sets the sv_d_b_low_limit of this ProcessingAdcp.


        :param sv_d_b_low_limit: The sv_d_b_low_limit of this ProcessingAdcp.  # noqa: E501
        :type: int
        """

        self._sv_d_b_low_limit = sv_d_b_low_limit

    @property
    def is_sv_d_b_low_limit_active(self):
        """Gets the is_sv_d_b_low_limit_active of this ProcessingAdcp.  # noqa: E501


        :return: The is_sv_d_b_low_limit_active of this ProcessingAdcp.  # noqa: E501
        :rtype: bool
        """
        return self._is_sv_d_b_low_limit_active

    @is_sv_d_b_low_limit_active.setter
    def is_sv_d_b_low_limit_active(self, is_sv_d_b_low_limit_active):
        """Sets the is_sv_d_b_low_limit_active of this ProcessingAdcp.


        :param is_sv_d_b_low_limit_active: The is_sv_d_b_low_limit_active of this ProcessingAdcp.  # noqa: E501
        :type: bool
        """

        self._is_sv_d_b_low_limit_active = is_sv_d_b_low_limit_active

    @property
    def sv_d_b_high_limit(self):
        """Gets the sv_d_b_high_limit of this ProcessingAdcp.  # noqa: E501


        :return: The sv_d_b_high_limit of this ProcessingAdcp.  # noqa: E501
        :rtype: int
        """
        return self._sv_d_b_high_limit

    @sv_d_b_high_limit.setter
    def sv_d_b_high_limit(self, sv_d_b_high_limit):
        """Sets the sv_d_b_high_limit of this ProcessingAdcp.


        :param sv_d_b_high_limit: The sv_d_b_high_limit of this ProcessingAdcp.  # noqa: E501
        :type: int
        """

        self._sv_d_b_high_limit = sv_d_b_high_limit

    @property
    def is_sv_d_b_high_limit_active(self):
        """Gets the is_sv_d_b_high_limit_active of this ProcessingAdcp.  # noqa: E501


        :return: The is_sv_d_b_high_limit_active of this ProcessingAdcp.  # noqa: E501
        :rtype: bool
        """
        return self._is_sv_d_b_high_limit_active

    @is_sv_d_b_high_limit_active.setter
    def is_sv_d_b_high_limit_active(self, is_sv_d_b_high_limit_active):
        """Sets the is_sv_d_b_high_limit_active of this ProcessingAdcp.


        :param is_sv_d_b_high_limit_active: The is_sv_d_b_high_limit_active of this ProcessingAdcp.  # noqa: E501
        :type: bool
        """

        self._is_sv_d_b_high_limit_active = is_sv_d_b_high_limit_active

    @property
    def use_epoch_time(self):
        """Gets the use_epoch_time of this ProcessingAdcp.  # noqa: E501


        :return: The use_epoch_time of this ProcessingAdcp.  # noqa: E501
        :rtype: bool
        """
        return self._use_epoch_time

    @use_epoch_time.setter
    def use_epoch_time(self, use_epoch_time):
        """Sets the use_epoch_time of this ProcessingAdcp.


        :param use_epoch_time: The use_epoch_time of this ProcessingAdcp.  # noqa: E501
        :type: bool
        """

        self._use_epoch_time = use_epoch_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessingAdcp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessingAdcp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
