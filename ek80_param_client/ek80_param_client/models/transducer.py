# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Transducer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transducer_name': 'str',
        'sound_velocity': 'float',
        'tx_voltage': 'float',
        'installation_type': 'str',
        'orientation_type': 'str',
        'installation_angles': 'RotationAngles',
        'installation_offset': 'GeoVector'
    }

    attribute_map = {
        'transducer_name': 'transducer-name',
        'sound_velocity': 'sound-velocity',
        'tx_voltage': 'tx-voltage',
        'installation_type': 'installation-type',
        'orientation_type': 'orientation-type',
        'installation_angles': 'installation-angles',
        'installation_offset': 'installation-offset'
    }

    def __init__(self, transducer_name=None, sound_velocity=None, tx_voltage=None, installation_type=None, orientation_type=None, installation_angles=None, installation_offset=None):  # noqa: E501
        """Transducer - a model defined in Swagger"""  # noqa: E501

        self._transducer_name = None
        self._sound_velocity = None
        self._tx_voltage = None
        self._installation_type = None
        self._orientation_type = None
        self._installation_angles = None
        self._installation_offset = None
        self.discriminator = None

        if transducer_name is not None:
            self.transducer_name = transducer_name
        if sound_velocity is not None:
            self.sound_velocity = sound_velocity
        if tx_voltage is not None:
            self.tx_voltage = tx_voltage
        if installation_type is not None:
            self.installation_type = installation_type
        if orientation_type is not None:
            self.orientation_type = orientation_type
        if installation_angles is not None:
            self.installation_angles = installation_angles
        if installation_offset is not None:
            self.installation_offset = installation_offset

    @property
    def transducer_name(self):
        """Gets the transducer_name of this Transducer.  # noqa: E501


        :return: The transducer_name of this Transducer.  # noqa: E501
        :rtype: str
        """
        return self._transducer_name

    @transducer_name.setter
    def transducer_name(self, transducer_name):
        """Sets the transducer_name of this Transducer.


        :param transducer_name: The transducer_name of this Transducer.  # noqa: E501
        :type: str
        """

        self._transducer_name = transducer_name

    @property
    def sound_velocity(self):
        """Gets the sound_velocity of this Transducer.  # noqa: E501


        :return: The sound_velocity of this Transducer.  # noqa: E501
        :rtype: float
        """
        return self._sound_velocity

    @sound_velocity.setter
    def sound_velocity(self, sound_velocity):
        """Sets the sound_velocity of this Transducer.


        :param sound_velocity: The sound_velocity of this Transducer.  # noqa: E501
        :type: float
        """

        self._sound_velocity = sound_velocity

    @property
    def tx_voltage(self):
        """Gets the tx_voltage of this Transducer.  # noqa: E501


        :return: The tx_voltage of this Transducer.  # noqa: E501
        :rtype: float
        """
        return self._tx_voltage

    @tx_voltage.setter
    def tx_voltage(self, tx_voltage):
        """Sets the tx_voltage of this Transducer.


        :param tx_voltage: The tx_voltage of this Transducer.  # noqa: E501
        :type: float
        """

        self._tx_voltage = tx_voltage

    @property
    def installation_type(self):
        """Gets the installation_type of this Transducer.  # noqa: E501


        :return: The installation_type of this Transducer.  # noqa: E501
        :rtype: str
        """
        return self._installation_type

    @installation_type.setter
    def installation_type(self, installation_type):
        """Sets the installation_type of this Transducer.


        :param installation_type: The installation_type of this Transducer.  # noqa: E501
        :type: str
        """
        allowed_values = ["hull-mounted", "variable-depth", "towed", "subsea"]  # noqa: E501
        if installation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `installation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(installation_type, allowed_values)
            )

        self._installation_type = installation_type

    @property
    def orientation_type(self):
        """Gets the orientation_type of this Transducer.  # noqa: E501


        :return: The orientation_type of this Transducer.  # noqa: E501
        :rtype: str
        """
        return self._orientation_type

    @orientation_type.setter
    def orientation_type(self, orientation_type):
        """Sets the orientation_type of this Transducer.


        :param orientation_type: The orientation_type of this Transducer.  # noqa: E501
        :type: str
        """
        allowed_values = ["vertical", "port", "starboard", "horizontal", "vertical-tilted", "upward-looking"]  # noqa: E501
        if orientation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `orientation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(orientation_type, allowed_values)
            )

        self._orientation_type = orientation_type

    @property
    def installation_angles(self):
        """Gets the installation_angles of this Transducer.  # noqa: E501


        :return: The installation_angles of this Transducer.  # noqa: E501
        :rtype: RotationAngles
        """
        return self._installation_angles

    @installation_angles.setter
    def installation_angles(self, installation_angles):
        """Sets the installation_angles of this Transducer.


        :param installation_angles: The installation_angles of this Transducer.  # noqa: E501
        :type: RotationAngles
        """

        self._installation_angles = installation_angles

    @property
    def installation_offset(self):
        """Gets the installation_offset of this Transducer.  # noqa: E501


        :return: The installation_offset of this Transducer.  # noqa: E501
        :rtype: GeoVector
        """
        return self._installation_offset

    @installation_offset.setter
    def installation_offset(self, installation_offset):
        """Sets the installation_offset of this Transducer.


        :param installation_offset: The installation_offset of this Transducer.  # noqa: E501
        :type: GeoVector
        """

        self._installation_offset = installation_offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transducer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transducer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
