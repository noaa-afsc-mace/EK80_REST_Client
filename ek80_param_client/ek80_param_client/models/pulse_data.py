# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PulseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto': 'bool',
        'name': 'str',
        'duration': 'float',
        'band_width': 'float',
        'tapering': 'float',
        'filter_type': 'str'
    }

    attribute_map = {
        'auto': 'auto',
        'name': 'name',
        'duration': 'duration',
        'band_width': 'band-width',
        'tapering': 'tapering',
        'filter_type': 'filter-type'
    }

    def __init__(self, auto=None, name=None, duration=None, band_width=None, tapering=None, filter_type=None):  # noqa: E501
        """PulseData - a model defined in Swagger"""  # noqa: E501

        self._auto = None
        self._name = None
        self._duration = None
        self._band_width = None
        self._tapering = None
        self._filter_type = None
        self.discriminator = None

        if auto is not None:
            self.auto = auto
        if name is not None:
            self.name = name
        if duration is not None:
            self.duration = duration
        if band_width is not None:
            self.band_width = band_width
        if tapering is not None:
            self.tapering = tapering
        if filter_type is not None:
            self.filter_type = filter_type

    @property
    def auto(self):
        """Gets the auto of this PulseData.  # noqa: E501


        :return: The auto of this PulseData.  # noqa: E501
        :rtype: bool
        """
        return self._auto

    @auto.setter
    def auto(self, auto):
        """Sets the auto of this PulseData.


        :param auto: The auto of this PulseData.  # noqa: E501
        :type: bool
        """

        self._auto = auto

    @property
    def name(self):
        """Gets the name of this PulseData.  # noqa: E501


        :return: The name of this PulseData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PulseData.


        :param name: The name of this PulseData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def duration(self):
        """Gets the duration of this PulseData.  # noqa: E501


        :return: The duration of this PulseData.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PulseData.


        :param duration: The duration of this PulseData.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def band_width(self):
        """Gets the band_width of this PulseData.  # noqa: E501


        :return: The band_width of this PulseData.  # noqa: E501
        :rtype: float
        """
        return self._band_width

    @band_width.setter
    def band_width(self, band_width):
        """Sets the band_width of this PulseData.


        :param band_width: The band_width of this PulseData.  # noqa: E501
        :type: float
        """

        self._band_width = band_width

    @property
    def tapering(self):
        """Gets the tapering of this PulseData.  # noqa: E501


        :return: The tapering of this PulseData.  # noqa: E501
        :rtype: float
        """
        return self._tapering

    @tapering.setter
    def tapering(self, tapering):
        """Sets the tapering of this PulseData.


        :param tapering: The tapering of this PulseData.  # noqa: E501
        :type: float
        """

        self._tapering = tapering

    @property
    def filter_type(self):
        """Gets the filter_type of this PulseData.  # noqa: E501


        :return: The filter_type of this PulseData.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this PulseData.


        :param filter_type: The filter_type of this PulseData.  # noqa: E501
        :type: str
        """

        self._filter_type = filter_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PulseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PulseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
