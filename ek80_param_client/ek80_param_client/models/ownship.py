# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Ownship(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'navigation': 'NavigationData',
        'motion': 'MotionData',
        'dimension': 'Dimension',
        'manual_settings': 'dict(str, ManualSetting)',
        'installation': 'ManualSetting'
    }

    attribute_map = {
        'navigation': 'navigation',
        'motion': 'motion',
        'dimension': 'dimension',
        'manual_settings': 'manual-settings',
        'installation': 'installation'
    }

    def __init__(self, navigation=None, motion=None, dimension=None, manual_settings=None, installation=None):  # noqa: E501
        """Ownship - a model defined in Swagger"""  # noqa: E501

        self._navigation = None
        self._motion = None
        self._dimension = None
        self._manual_settings = None
        self._installation = None
        self.discriminator = None

        if navigation is not None:
            self.navigation = navigation
        if motion is not None:
            self.motion = motion
        if dimension is not None:
            self.dimension = dimension
        if manual_settings is not None:
            self.manual_settings = manual_settings
        if installation is not None:
            self.installation = installation

    @property
    def navigation(self):
        """Gets the navigation of this Ownship.  # noqa: E501


        :return: The navigation of this Ownship.  # noqa: E501
        :rtype: NavigationData
        """
        return self._navigation

    @navigation.setter
    def navigation(self, navigation):
        """Sets the navigation of this Ownship.


        :param navigation: The navigation of this Ownship.  # noqa: E501
        :type: NavigationData
        """

        self._navigation = navigation

    @property
    def motion(self):
        """Gets the motion of this Ownship.  # noqa: E501


        :return: The motion of this Ownship.  # noqa: E501
        :rtype: MotionData
        """
        return self._motion

    @motion.setter
    def motion(self, motion):
        """Sets the motion of this Ownship.


        :param motion: The motion of this Ownship.  # noqa: E501
        :type: MotionData
        """

        self._motion = motion

    @property
    def dimension(self):
        """Gets the dimension of this Ownship.  # noqa: E501


        :return: The dimension of this Ownship.  # noqa: E501
        :rtype: Dimension
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this Ownship.


        :param dimension: The dimension of this Ownship.  # noqa: E501
        :type: Dimension
        """

        self._dimension = dimension

    @property
    def manual_settings(self):
        """Gets the manual_settings of this Ownship.  # noqa: E501


        :return: The manual_settings of this Ownship.  # noqa: E501
        :rtype: dict(str, ManualSetting)
        """
        return self._manual_settings

    @manual_settings.setter
    def manual_settings(self, manual_settings):
        """Sets the manual_settings of this Ownship.


        :param manual_settings: The manual_settings of this Ownship.  # noqa: E501
        :type: dict(str, ManualSetting)
        """

        self._manual_settings = manual_settings

    @property
    def installation(self):
        """Gets the installation of this Ownship.  # noqa: E501


        :return: The installation of this Ownship.  # noqa: E501
        :rtype: ManualSetting
        """
        return self._installation

    @installation.setter
    def installation(self, installation):
        """Sets the installation of this Ownship.


        :param installation: The installation of this Ownship.  # noqa: E501
        :type: ManualSetting
        """

        self._installation = installation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ownship, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ownship):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
