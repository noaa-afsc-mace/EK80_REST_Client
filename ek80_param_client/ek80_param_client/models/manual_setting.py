# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ManualSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_value': 'float',
        'is_manual': 'bool'
    }

    attribute_map = {
        'current_value': 'current-value',
        'is_manual': 'is-manual'
    }

    def __init__(self, current_value=None, is_manual=None):  # noqa: E501
        """ManualSetting - a model defined in Swagger"""  # noqa: E501

        self._current_value = None
        self._is_manual = None
        self.discriminator = None

        if current_value is not None:
            self.current_value = current_value
        if is_manual is not None:
            self.is_manual = is_manual

    @property
    def current_value(self):
        """Gets the current_value of this ManualSetting.  # noqa: E501


        :return: The current_value of this ManualSetting.  # noqa: E501
        :rtype: float
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value):
        """Sets the current_value of this ManualSetting.


        :param current_value: The current_value of this ManualSetting.  # noqa: E501
        :type: float
        """

        self._current_value = current_value

    @property
    def is_manual(self):
        """Gets the is_manual of this ManualSetting.  # noqa: E501


        :return: The is_manual of this ManualSetting.  # noqa: E501
        :rtype: bool
        """
        return self._is_manual

    @is_manual.setter
    def is_manual(self, is_manual):
        """Sets the is_manual of this ManualSetting.


        :param is_manual: The is_manual of this ManualSetting.  # noqa: E501
        :type: bool
        """

        self._is_manual = is_manual

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManualSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManualSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
