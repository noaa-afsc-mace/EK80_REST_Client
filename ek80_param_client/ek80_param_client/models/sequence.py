# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Sequence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sequence_name': 'str',
        'sequence_ensembles': 'list[SequenceEnsemble]'
    }

    attribute_map = {
        'sequence_name': 'sequence-name',
        'sequence_ensembles': 'sequence-ensembles'
    }

    def __init__(self, sequence_name=None, sequence_ensembles=None):  # noqa: E501
        """Sequence - a model defined in Swagger"""  # noqa: E501

        self._sequence_name = None
        self._sequence_ensembles = None
        self.discriminator = None

        if sequence_name is not None:
            self.sequence_name = sequence_name
        if sequence_ensembles is not None:
            self.sequence_ensembles = sequence_ensembles

    @property
    def sequence_name(self):
        """Gets the sequence_name of this Sequence.  # noqa: E501


        :return: The sequence_name of this Sequence.  # noqa: E501
        :rtype: str
        """
        return self._sequence_name

    @sequence_name.setter
    def sequence_name(self, sequence_name):
        """Sets the sequence_name of this Sequence.


        :param sequence_name: The sequence_name of this Sequence.  # noqa: E501
        :type: str
        """

        self._sequence_name = sequence_name

    @property
    def sequence_ensembles(self):
        """Gets the sequence_ensembles of this Sequence.  # noqa: E501


        :return: The sequence_ensembles of this Sequence.  # noqa: E501
        :rtype: list[SequenceEnsemble]
        """
        return self._sequence_ensembles

    @sequence_ensembles.setter
    def sequence_ensembles(self, sequence_ensembles):
        """Sets the sequence_ensembles of this Sequence.


        :param sequence_ensembles: The sequence_ensembles of this Sequence.  # noqa: E501
        :type: list[SequenceEnsemble]
        """

        self._sequence_ensembles = sequence_ensembles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sequence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sequence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
