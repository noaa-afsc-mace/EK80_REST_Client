# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RxFan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fan_name': 'str',
        'delay': 'int',
        'range': 'int',
        'absorption_coefficient': 'float',
        'geometry': 'SectorGeometry',
        'sampling_info': 'SamplingInfo',
        'beam_type': 'str',
        'beams': 'list[RxBeam]',
        'filter_stages': 'list[FilterStage]',
        'ping_name': 'str',
        'transducer_name': 'str'
    }

    attribute_map = {
        'fan_name': 'fan-name',
        'delay': 'delay',
        'range': 'range',
        'absorption_coefficient': 'absorption-coefficient',
        'geometry': 'geometry',
        'sampling_info': 'sampling-info',
        'beam_type': 'beam-type',
        'beams': 'beams',
        'filter_stages': 'filter-stages',
        'ping_name': 'ping-name',
        'transducer_name': 'transducer-name'
    }

    def __init__(self, fan_name=None, delay=None, range=None, absorption_coefficient=None, geometry=None, sampling_info=None, beam_type=None, beams=None, filter_stages=None, ping_name=None, transducer_name=None):  # noqa: E501
        """RxFan - a model defined in Swagger"""  # noqa: E501

        self._fan_name = None
        self._delay = None
        self._range = None
        self._absorption_coefficient = None
        self._geometry = None
        self._sampling_info = None
        self._beam_type = None
        self._beams = None
        self._filter_stages = None
        self._ping_name = None
        self._transducer_name = None
        self.discriminator = None

        if fan_name is not None:
            self.fan_name = fan_name
        if delay is not None:
            self.delay = delay
        if range is not None:
            self.range = range
        if absorption_coefficient is not None:
            self.absorption_coefficient = absorption_coefficient
        if geometry is not None:
            self.geometry = geometry
        if sampling_info is not None:
            self.sampling_info = sampling_info
        if beam_type is not None:
            self.beam_type = beam_type
        if beams is not None:
            self.beams = beams
        if filter_stages is not None:
            self.filter_stages = filter_stages
        if ping_name is not None:
            self.ping_name = ping_name
        if transducer_name is not None:
            self.transducer_name = transducer_name

    @property
    def fan_name(self):
        """Gets the fan_name of this RxFan.  # noqa: E501


        :return: The fan_name of this RxFan.  # noqa: E501
        :rtype: str
        """
        return self._fan_name

    @fan_name.setter
    def fan_name(self, fan_name):
        """Sets the fan_name of this RxFan.


        :param fan_name: The fan_name of this RxFan.  # noqa: E501
        :type: str
        """

        self._fan_name = fan_name

    @property
    def delay(self):
        """Gets the delay of this RxFan.  # noqa: E501


        :return: The delay of this RxFan.  # noqa: E501
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this RxFan.


        :param delay: The delay of this RxFan.  # noqa: E501
        :type: int
        """

        self._delay = delay

    @property
    def range(self):
        """Gets the range of this RxFan.  # noqa: E501


        :return: The range of this RxFan.  # noqa: E501
        :rtype: int
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this RxFan.


        :param range: The range of this RxFan.  # noqa: E501
        :type: int
        """

        self._range = range

    @property
    def absorption_coefficient(self):
        """Gets the absorption_coefficient of this RxFan.  # noqa: E501


        :return: The absorption_coefficient of this RxFan.  # noqa: E501
        :rtype: float
        """
        return self._absorption_coefficient

    @absorption_coefficient.setter
    def absorption_coefficient(self, absorption_coefficient):
        """Sets the absorption_coefficient of this RxFan.


        :param absorption_coefficient: The absorption_coefficient of this RxFan.  # noqa: E501
        :type: float
        """

        self._absorption_coefficient = absorption_coefficient

    @property
    def geometry(self):
        """Gets the geometry of this RxFan.  # noqa: E501


        :return: The geometry of this RxFan.  # noqa: E501
        :rtype: SectorGeometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this RxFan.


        :param geometry: The geometry of this RxFan.  # noqa: E501
        :type: SectorGeometry
        """

        self._geometry = geometry

    @property
    def sampling_info(self):
        """Gets the sampling_info of this RxFan.  # noqa: E501


        :return: The sampling_info of this RxFan.  # noqa: E501
        :rtype: SamplingInfo
        """
        return self._sampling_info

    @sampling_info.setter
    def sampling_info(self, sampling_info):
        """Sets the sampling_info of this RxFan.


        :param sampling_info: The sampling_info of this RxFan.  # noqa: E501
        :type: SamplingInfo
        """

        self._sampling_info = sampling_info

    @property
    def beam_type(self):
        """Gets the beam_type of this RxFan.  # noqa: E501


        :return: The beam_type of this RxFan.  # noqa: E501
        :rtype: str
        """
        return self._beam_type

    @beam_type.setter
    def beam_type(self, beam_type):
        """Sets the beam_type of this RxFan.


        :param beam_type: The beam_type of this RxFan.  # noqa: E501
        :type: str
        """
        allowed_values = ["single", "reference", "split2", "split3", "split4"]  # noqa: E501
        if beam_type not in allowed_values:
            raise ValueError(
                "Invalid value for `beam_type` ({0}), must be one of {1}"  # noqa: E501
                .format(beam_type, allowed_values)
            )

        self._beam_type = beam_type

    @property
    def beams(self):
        """Gets the beams of this RxFan.  # noqa: E501


        :return: The beams of this RxFan.  # noqa: E501
        :rtype: list[RxBeam]
        """
        return self._beams

    @beams.setter
    def beams(self, beams):
        """Sets the beams of this RxFan.


        :param beams: The beams of this RxFan.  # noqa: E501
        :type: list[RxBeam]
        """

        self._beams = beams

    @property
    def filter_stages(self):
        """Gets the filter_stages of this RxFan.  # noqa: E501


        :return: The filter_stages of this RxFan.  # noqa: E501
        :rtype: list[FilterStage]
        """
        return self._filter_stages

    @filter_stages.setter
    def filter_stages(self, filter_stages):
        """Sets the filter_stages of this RxFan.


        :param filter_stages: The filter_stages of this RxFan.  # noqa: E501
        :type: list[FilterStage]
        """

        self._filter_stages = filter_stages

    @property
    def ping_name(self):
        """Gets the ping_name of this RxFan.  # noqa: E501


        :return: The ping_name of this RxFan.  # noqa: E501
        :rtype: str
        """
        return self._ping_name

    @ping_name.setter
    def ping_name(self, ping_name):
        """Sets the ping_name of this RxFan.


        :param ping_name: The ping_name of this RxFan.  # noqa: E501
        :type: str
        """

        self._ping_name = ping_name

    @property
    def transducer_name(self):
        """Gets the transducer_name of this RxFan.  # noqa: E501


        :return: The transducer_name of this RxFan.  # noqa: E501
        :rtype: str
        """
        return self._transducer_name

    @transducer_name.setter
    def transducer_name(self, transducer_name):
        """Sets the transducer_name of this RxFan.


        :param transducer_name: The transducer_name of this RxFan.  # noqa: E501
        :type: str
        """

        self._transducer_name = transducer_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RxFan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RxFan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
