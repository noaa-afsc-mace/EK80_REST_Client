# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PulseSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'duration': 'float',
        'slope': 'float',
        'center_frequency': 'int',
        'sweep_length': 'int'
    }

    attribute_map = {
        'name': 'name',
        'duration': 'duration',
        'slope': 'slope',
        'center_frequency': 'center-frequency',
        'sweep_length': 'sweep-length'
    }

    def __init__(self, name=None, duration=None, slope=None, center_frequency=None, sweep_length=None):  # noqa: E501
        """PulseSetting - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._duration = None
        self._slope = None
        self._center_frequency = None
        self._sweep_length = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if duration is not None:
            self.duration = duration
        if slope is not None:
            self.slope = slope
        if center_frequency is not None:
            self.center_frequency = center_frequency
        if sweep_length is not None:
            self.sweep_length = sweep_length

    @property
    def name(self):
        """Gets the name of this PulseSetting.  # noqa: E501


        :return: The name of this PulseSetting.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PulseSetting.


        :param name: The name of this PulseSetting.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def duration(self):
        """Gets the duration of this PulseSetting.  # noqa: E501


        :return: The duration of this PulseSetting.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PulseSetting.


        :param duration: The duration of this PulseSetting.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def slope(self):
        """Gets the slope of this PulseSetting.  # noqa: E501


        :return: The slope of this PulseSetting.  # noqa: E501
        :rtype: float
        """
        return self._slope

    @slope.setter
    def slope(self, slope):
        """Sets the slope of this PulseSetting.


        :param slope: The slope of this PulseSetting.  # noqa: E501
        :type: float
        """

        self._slope = slope

    @property
    def center_frequency(self):
        """Gets the center_frequency of this PulseSetting.  # noqa: E501


        :return: The center_frequency of this PulseSetting.  # noqa: E501
        :rtype: int
        """
        return self._center_frequency

    @center_frequency.setter
    def center_frequency(self, center_frequency):
        """Sets the center_frequency of this PulseSetting.


        :param center_frequency: The center_frequency of this PulseSetting.  # noqa: E501
        :type: int
        """

        self._center_frequency = center_frequency

    @property
    def sweep_length(self):
        """Gets the sweep_length of this PulseSetting.  # noqa: E501


        :return: The sweep_length of this PulseSetting.  # noqa: E501
        :rtype: int
        """
        return self._sweep_length

    @sweep_length.setter
    def sweep_length(self, sweep_length):
        """Sets the sweep_length of this PulseSetting.


        :param sweep_length: The sweep_length of this PulseSetting.  # noqa: E501
        :type: int
        """

        self._sweep_length = sweep_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PulseSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PulseSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
