# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PulseSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pulse_type': 'str',
        'pulse_duration': 'float',
        'start_frequency': 'float',
        'end_frequency': 'float',
        'channel_mode': 'str',
        'ramping': 'str',
        'filter_type': 'str'
    }

    attribute_map = {
        'pulse_type': 'pulse-type',
        'pulse_duration': 'pulse-duration',
        'start_frequency': 'start-frequency',
        'end_frequency': 'end-frequency',
        'channel_mode': 'channel-mode',
        'ramping': 'ramping',
        'filter_type': 'filter-type'
    }

    def __init__(self, pulse_type=None, pulse_duration=None, start_frequency=None, end_frequency=None, channel_mode=None, ramping=None, filter_type=None):  # noqa: E501
        """PulseSettings - a model defined in Swagger"""  # noqa: E501

        self._pulse_type = None
        self._pulse_duration = None
        self._start_frequency = None
        self._end_frequency = None
        self._channel_mode = None
        self._ramping = None
        self._filter_type = None
        self.discriminator = None

        if pulse_type is not None:
            self.pulse_type = pulse_type
        if pulse_duration is not None:
            self.pulse_duration = pulse_duration
        if start_frequency is not None:
            self.start_frequency = start_frequency
        if end_frequency is not None:
            self.end_frequency = end_frequency
        if channel_mode is not None:
            self.channel_mode = channel_mode
        if ramping is not None:
            self.ramping = ramping
        if filter_type is not None:
            self.filter_type = filter_type

    @property
    def pulse_type(self):
        """Gets the pulse_type of this PulseSettings.  # noqa: E501


        :return: The pulse_type of this PulseSettings.  # noqa: E501
        :rtype: str
        """
        return self._pulse_type

    @pulse_type.setter
    def pulse_type(self, pulse_type):
        """Sets the pulse_type of this PulseSettings.


        :param pulse_type: The pulse_type of this PulseSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["cw", "lfm-up", "lfm-down"]  # noqa: E501
        if pulse_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pulse_type` ({0}), must be one of {1}"  # noqa: E501
                .format(pulse_type, allowed_values)
            )

        self._pulse_type = pulse_type

    @property
    def pulse_duration(self):
        """Gets the pulse_duration of this PulseSettings.  # noqa: E501

        The pulse duration in seconds. Valid values depends on pulse type, frequency and transducer.  # noqa: E501

        :return: The pulse_duration of this PulseSettings.  # noqa: E501
        :rtype: float
        """
        return self._pulse_duration

    @pulse_duration.setter
    def pulse_duration(self, pulse_duration):
        """Sets the pulse_duration of this PulseSettings.

        The pulse duration in seconds. Valid values depends on pulse type, frequency and transducer.  # noqa: E501

        :param pulse_duration: The pulse_duration of this PulseSettings.  # noqa: E501
        :type: float
        """

        self._pulse_duration = pulse_duration

    @property
    def start_frequency(self):
        """Gets the start_frequency of this PulseSettings.  # noqa: E501


        :return: The start_frequency of this PulseSettings.  # noqa: E501
        :rtype: float
        """
        return self._start_frequency

    @start_frequency.setter
    def start_frequency(self, start_frequency):
        """Sets the start_frequency of this PulseSettings.


        :param start_frequency: The start_frequency of this PulseSettings.  # noqa: E501
        :type: float
        """

        self._start_frequency = start_frequency

    @property
    def end_frequency(self):
        """Gets the end_frequency of this PulseSettings.  # noqa: E501


        :return: The end_frequency of this PulseSettings.  # noqa: E501
        :rtype: float
        """
        return self._end_frequency

    @end_frequency.setter
    def end_frequency(self, end_frequency):
        """Sets the end_frequency of this PulseSettings.


        :param end_frequency: The end_frequency of this PulseSettings.  # noqa: E501
        :type: float
        """

        self._end_frequency = end_frequency

    @property
    def channel_mode(self):
        """Gets the channel_mode of this PulseSettings.  # noqa: E501


        :return: The channel_mode of this PulseSettings.  # noqa: E501
        :rtype: str
        """
        return self._channel_mode

    @channel_mode.setter
    def channel_mode(self, channel_mode):
        """Sets the channel_mode of this PulseSettings.


        :param channel_mode: The channel_mode of this PulseSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "passive", "test"]  # noqa: E501
        if channel_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(channel_mode, allowed_values)
            )

        self._channel_mode = channel_mode

    @property
    def ramping(self):
        """Gets the ramping of this PulseSettings.  # noqa: E501

        Ramping for selected pulse type, Fast or slow. Sets tapering and slope.  # noqa: E501

        :return: The ramping of this PulseSettings.  # noqa: E501
        :rtype: str
        """
        return self._ramping

    @ramping.setter
    def ramping(self, ramping):
        """Sets the ramping of this PulseSettings.

        Ramping for selected pulse type, Fast or slow. Sets tapering and slope.  # noqa: E501

        :param ramping: The ramping of this PulseSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["fast", "slow"]  # noqa: E501
        if ramping not in allowed_values:
            raise ValueError(
                "Invalid value for `ramping` ({0}), must be one of {1}"  # noqa: E501
                .format(ramping, allowed_values)
            )

        self._ramping = ramping

    @property
    def filter_type(self):
        """Gets the filter_type of this PulseSettings.  # noqa: E501

        Selected filter type as string  # noqa: E501

        :return: The filter_type of this PulseSettings.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this PulseSettings.

        Selected filter type as string  # noqa: E501

        :param filter_type: The filter_type of this PulseSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["standard-resolution", "short"]  # noqa: E501
        if filter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_type` ({0}), must be one of {1}"  # noqa: E501
                .format(filter_type, allowed_values)
            )

        self._filter_type = filter_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PulseSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PulseSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
