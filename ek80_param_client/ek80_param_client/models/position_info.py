# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PositionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'latitude': 'float',
        'longitude': 'float',
        'input_status': 'str',
        'depth': 'DoubleValueWithInputStatus'
    }

    attribute_map = {
        'latitude': 'latitude',
        'longitude': 'longitude',
        'input_status': 'input-status',
        'depth': 'depth'
    }

    def __init__(self, latitude=None, longitude=None, input_status=None, depth=None):  # noqa: E501
        """PositionInfo - a model defined in Swagger"""  # noqa: E501

        self._latitude = None
        self._longitude = None
        self._input_status = None
        self._depth = None
        self.discriminator = None

        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if input_status is not None:
            self.input_status = input_status
        if depth is not None:
            self.depth = depth

    @property
    def latitude(self):
        """Gets the latitude of this PositionInfo.  # noqa: E501


        :return: The latitude of this PositionInfo.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this PositionInfo.


        :param latitude: The latitude of this PositionInfo.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this PositionInfo.  # noqa: E501


        :return: The longitude of this PositionInfo.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this PositionInfo.


        :param longitude: The longitude of this PositionInfo.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def input_status(self):
        """Gets the input_status of this PositionInfo.  # noqa: E501


        :return: The input_status of this PositionInfo.  # noqa: E501
        :rtype: str
        """
        return self._input_status

    @input_status.setter
    def input_status(self, input_status):
        """Sets the input_status of this PositionInfo.


        :param input_status: The input_status of this PositionInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["timeout", "ok", "degraded", "invalid"]  # noqa: E501
        if input_status not in allowed_values:
            raise ValueError(
                "Invalid value for `input_status` ({0}), must be one of {1}"  # noqa: E501
                .format(input_status, allowed_values)
            )

        self._input_status = input_status

    @property
    def depth(self):
        """Gets the depth of this PositionInfo.  # noqa: E501


        :return: The depth of this PositionInfo.  # noqa: E501
        :rtype: DoubleValueWithInputStatus
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this PositionInfo.


        :param depth: The depth of this PositionInfo.  # noqa: E501
        :type: DoubleValueWithInputStatus
        """

        self._depth = depth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PositionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
