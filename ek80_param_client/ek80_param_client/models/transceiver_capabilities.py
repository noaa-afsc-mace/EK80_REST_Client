# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TransceiverCapabilities(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'element_sample_frequency': 'float',
        'serial_number': 'int',
        'ip_address': 'str',
        'impedance': 'float',
        'max_tx_power': 'float',
        'transceiver_model': 'str',
        'identity': 'str',
        'market_segment': 'str',
        'available_filters': 'list[str]',
        'available_channel_modes': 'list[str]',
        'available_pulse_forms': 'list[str]'
    }

    attribute_map = {
        'element_sample_frequency': 'element-sample-frequency',
        'serial_number': 'serial-number',
        'ip_address': 'ip-address',
        'impedance': 'impedance',
        'max_tx_power': 'max-tx-power',
        'transceiver_model': 'transceiver-model',
        'identity': 'identity',
        'market_segment': 'market-segment',
        'available_filters': 'available-filters',
        'available_channel_modes': 'available-channel-modes',
        'available_pulse_forms': 'available-pulse-forms'
    }

    def __init__(self, element_sample_frequency=None, serial_number=None, ip_address=None, impedance=None, max_tx_power=None, transceiver_model=None, identity=None, market_segment=None, available_filters=None, available_channel_modes=None, available_pulse_forms=None):  # noqa: E501
        """TransceiverCapabilities - a model defined in Swagger"""  # noqa: E501

        self._element_sample_frequency = None
        self._serial_number = None
        self._ip_address = None
        self._impedance = None
        self._max_tx_power = None
        self._transceiver_model = None
        self._identity = None
        self._market_segment = None
        self._available_filters = None
        self._available_channel_modes = None
        self._available_pulse_forms = None
        self.discriminator = None

        if element_sample_frequency is not None:
            self.element_sample_frequency = element_sample_frequency
        if serial_number is not None:
            self.serial_number = serial_number
        if ip_address is not None:
            self.ip_address = ip_address
        if impedance is not None:
            self.impedance = impedance
        if max_tx_power is not None:
            self.max_tx_power = max_tx_power
        if transceiver_model is not None:
            self.transceiver_model = transceiver_model
        if identity is not None:
            self.identity = identity
        if market_segment is not None:
            self.market_segment = market_segment
        if available_filters is not None:
            self.available_filters = available_filters
        if available_channel_modes is not None:
            self.available_channel_modes = available_channel_modes
        if available_pulse_forms is not None:
            self.available_pulse_forms = available_pulse_forms

    @property
    def element_sample_frequency(self):
        """Gets the element_sample_frequency of this TransceiverCapabilities.  # noqa: E501


        :return: The element_sample_frequency of this TransceiverCapabilities.  # noqa: E501
        :rtype: float
        """
        return self._element_sample_frequency

    @element_sample_frequency.setter
    def element_sample_frequency(self, element_sample_frequency):
        """Sets the element_sample_frequency of this TransceiverCapabilities.


        :param element_sample_frequency: The element_sample_frequency of this TransceiverCapabilities.  # noqa: E501
        :type: float
        """

        self._element_sample_frequency = element_sample_frequency

    @property
    def serial_number(self):
        """Gets the serial_number of this TransceiverCapabilities.  # noqa: E501


        :return: The serial_number of this TransceiverCapabilities.  # noqa: E501
        :rtype: int
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this TransceiverCapabilities.


        :param serial_number: The serial_number of this TransceiverCapabilities.  # noqa: E501
        :type: int
        """

        self._serial_number = serial_number

    @property
    def ip_address(self):
        """Gets the ip_address of this TransceiverCapabilities.  # noqa: E501


        :return: The ip_address of this TransceiverCapabilities.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this TransceiverCapabilities.


        :param ip_address: The ip_address of this TransceiverCapabilities.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def impedance(self):
        """Gets the impedance of this TransceiverCapabilities.  # noqa: E501


        :return: The impedance of this TransceiverCapabilities.  # noqa: E501
        :rtype: float
        """
        return self._impedance

    @impedance.setter
    def impedance(self, impedance):
        """Sets the impedance of this TransceiverCapabilities.


        :param impedance: The impedance of this TransceiverCapabilities.  # noqa: E501
        :type: float
        """

        self._impedance = impedance

    @property
    def max_tx_power(self):
        """Gets the max_tx_power of this TransceiverCapabilities.  # noqa: E501


        :return: The max_tx_power of this TransceiverCapabilities.  # noqa: E501
        :rtype: float
        """
        return self._max_tx_power

    @max_tx_power.setter
    def max_tx_power(self, max_tx_power):
        """Sets the max_tx_power of this TransceiverCapabilities.


        :param max_tx_power: The max_tx_power of this TransceiverCapabilities.  # noqa: E501
        :type: float
        """

        self._max_tx_power = max_tx_power

    @property
    def transceiver_model(self):
        """Gets the transceiver_model of this TransceiverCapabilities.  # noqa: E501


        :return: The transceiver_model of this TransceiverCapabilities.  # noqa: E501
        :rtype: str
        """
        return self._transceiver_model

    @transceiver_model.setter
    def transceiver_model(self, transceiver_model):
        """Sets the transceiver_model of this TransceiverCapabilities.


        :param transceiver_model: The transceiver_model of this TransceiverCapabilities.  # noqa: E501
        :type: str
        """

        self._transceiver_model = transceiver_model

    @property
    def identity(self):
        """Gets the identity of this TransceiverCapabilities.  # noqa: E501


        :return: The identity of this TransceiverCapabilities.  # noqa: E501
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this TransceiverCapabilities.


        :param identity: The identity of this TransceiverCapabilities.  # noqa: E501
        :type: str
        """

        self._identity = identity

    @property
    def market_segment(self):
        """Gets the market_segment of this TransceiverCapabilities.  # noqa: E501


        :return: The market_segment of this TransceiverCapabilities.  # noqa: E501
        :rtype: str
        """
        return self._market_segment

    @market_segment.setter
    def market_segment(self, market_segment):
        """Sets the market_segment of this TransceiverCapabilities.


        :param market_segment: The market_segment of this TransceiverCapabilities.  # noqa: E501
        :type: str
        """

        self._market_segment = market_segment

    @property
    def available_filters(self):
        """Gets the available_filters of this TransceiverCapabilities.  # noqa: E501


        :return: The available_filters of this TransceiverCapabilities.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_filters

    @available_filters.setter
    def available_filters(self, available_filters):
        """Sets the available_filters of this TransceiverCapabilities.


        :param available_filters: The available_filters of this TransceiverCapabilities.  # noqa: E501
        :type: list[str]
        """

        self._available_filters = available_filters

    @property
    def available_channel_modes(self):
        """Gets the available_channel_modes of this TransceiverCapabilities.  # noqa: E501


        :return: The available_channel_modes of this TransceiverCapabilities.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_channel_modes

    @available_channel_modes.setter
    def available_channel_modes(self, available_channel_modes):
        """Sets the available_channel_modes of this TransceiverCapabilities.


        :param available_channel_modes: The available_channel_modes of this TransceiverCapabilities.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["active", "passive", "test"]  # noqa: E501
        if not set(available_channel_modes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `available_channel_modes` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(available_channel_modes) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._available_channel_modes = available_channel_modes

    @property
    def available_pulse_forms(self):
        """Gets the available_pulse_forms of this TransceiverCapabilities.  # noqa: E501


        :return: The available_pulse_forms of this TransceiverCapabilities.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_pulse_forms

    @available_pulse_forms.setter
    def available_pulse_forms(self, available_pulse_forms):
        """Sets the available_pulse_forms of this TransceiverCapabilities.


        :param available_pulse_forms: The available_pulse_forms of this TransceiverCapabilities.  # noqa: E501
        :type: list[str]
        """

        self._available_pulse_forms = available_pulse_forms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransceiverCapabilities, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransceiverCapabilities):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
