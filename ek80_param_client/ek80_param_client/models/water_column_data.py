# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WaterColumnData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acidity': 'float',
        'depth_for_sv_and_absorption_calculations': 'float',
        'latitude_for_pressure_calculations': 'float',
        'salinity': 'float',
        'water_temperature': 'float',
        'water_column_sound_speed_source': 'str',
        'water_column_sound_speed': 'float',
        'selected_profile': 'str'
    }

    attribute_map = {
        'acidity': 'acidity',
        'depth_for_sv_and_absorption_calculations': 'depth-for-sv-and-absorption-calculations',
        'latitude_for_pressure_calculations': 'latitude-for-pressure-calculations',
        'salinity': 'salinity',
        'water_temperature': 'water-temperature',
        'water_column_sound_speed_source': 'water-column-sound-speed-source',
        'water_column_sound_speed': 'water-column-sound-speed',
        'selected_profile': 'selected-profile'
    }

    def __init__(self, acidity=None, depth_for_sv_and_absorption_calculations=None, latitude_for_pressure_calculations=None, salinity=None, water_temperature=None, water_column_sound_speed_source=None, water_column_sound_speed=None, selected_profile=None):  # noqa: E501
        """WaterColumnData - a model defined in Swagger"""  # noqa: E501

        self._acidity = None
        self._depth_for_sv_and_absorption_calculations = None
        self._latitude_for_pressure_calculations = None
        self._salinity = None
        self._water_temperature = None
        self._water_column_sound_speed_source = None
        self._water_column_sound_speed = None
        self._selected_profile = None
        self.discriminator = None

        if acidity is not None:
            self.acidity = acidity
        if depth_for_sv_and_absorption_calculations is not None:
            self.depth_for_sv_and_absorption_calculations = depth_for_sv_and_absorption_calculations
        if latitude_for_pressure_calculations is not None:
            self.latitude_for_pressure_calculations = latitude_for_pressure_calculations
        if salinity is not None:
            self.salinity = salinity
        if water_temperature is not None:
            self.water_temperature = water_temperature
        if water_column_sound_speed_source is not None:
            self.water_column_sound_speed_source = water_column_sound_speed_source
        if water_column_sound_speed is not None:
            self.water_column_sound_speed = water_column_sound_speed
        if selected_profile is not None:
            self.selected_profile = selected_profile

    @property
    def acidity(self):
        """Gets the acidity of this WaterColumnData.  # noqa: E501


        :return: The acidity of this WaterColumnData.  # noqa: E501
        :rtype: float
        """
        return self._acidity

    @acidity.setter
    def acidity(self, acidity):
        """Sets the acidity of this WaterColumnData.


        :param acidity: The acidity of this WaterColumnData.  # noqa: E501
        :type: float
        """

        self._acidity = acidity

    @property
    def depth_for_sv_and_absorption_calculations(self):
        """Gets the depth_for_sv_and_absorption_calculations of this WaterColumnData.  # noqa: E501


        :return: The depth_for_sv_and_absorption_calculations of this WaterColumnData.  # noqa: E501
        :rtype: float
        """
        return self._depth_for_sv_and_absorption_calculations

    @depth_for_sv_and_absorption_calculations.setter
    def depth_for_sv_and_absorption_calculations(self, depth_for_sv_and_absorption_calculations):
        """Sets the depth_for_sv_and_absorption_calculations of this WaterColumnData.


        :param depth_for_sv_and_absorption_calculations: The depth_for_sv_and_absorption_calculations of this WaterColumnData.  # noqa: E501
        :type: float
        """

        self._depth_for_sv_and_absorption_calculations = depth_for_sv_and_absorption_calculations

    @property
    def latitude_for_pressure_calculations(self):
        """Gets the latitude_for_pressure_calculations of this WaterColumnData.  # noqa: E501


        :return: The latitude_for_pressure_calculations of this WaterColumnData.  # noqa: E501
        :rtype: float
        """
        return self._latitude_for_pressure_calculations

    @latitude_for_pressure_calculations.setter
    def latitude_for_pressure_calculations(self, latitude_for_pressure_calculations):
        """Sets the latitude_for_pressure_calculations of this WaterColumnData.


        :param latitude_for_pressure_calculations: The latitude_for_pressure_calculations of this WaterColumnData.  # noqa: E501
        :type: float
        """

        self._latitude_for_pressure_calculations = latitude_for_pressure_calculations

    @property
    def salinity(self):
        """Gets the salinity of this WaterColumnData.  # noqa: E501


        :return: The salinity of this WaterColumnData.  # noqa: E501
        :rtype: float
        """
        return self._salinity

    @salinity.setter
    def salinity(self, salinity):
        """Sets the salinity of this WaterColumnData.


        :param salinity: The salinity of this WaterColumnData.  # noqa: E501
        :type: float
        """

        self._salinity = salinity

    @property
    def water_temperature(self):
        """Gets the water_temperature of this WaterColumnData.  # noqa: E501


        :return: The water_temperature of this WaterColumnData.  # noqa: E501
        :rtype: float
        """
        return self._water_temperature

    @water_temperature.setter
    def water_temperature(self, water_temperature):
        """Sets the water_temperature of this WaterColumnData.


        :param water_temperature: The water_temperature of this WaterColumnData.  # noqa: E501
        :type: float
        """

        self._water_temperature = water_temperature

    @property
    def water_column_sound_speed_source(self):
        """Gets the water_column_sound_speed_source of this WaterColumnData.  # noqa: E501


        :return: The water_column_sound_speed_source of this WaterColumnData.  # noqa: E501
        :rtype: str
        """
        return self._water_column_sound_speed_source

    @water_column_sound_speed_source.setter
    def water_column_sound_speed_source(self, water_column_sound_speed_source):
        """Sets the water_column_sound_speed_source of this WaterColumnData.


        :param water_column_sound_speed_source: The water_column_sound_speed_source of this WaterColumnData.  # noqa: E501
        :type: str
        """
        allowed_values = ["manual", "calculated", "profile", "probe"]  # noqa: E501
        if water_column_sound_speed_source not in allowed_values:
            raise ValueError(
                "Invalid value for `water_column_sound_speed_source` ({0}), must be one of {1}"  # noqa: E501
                .format(water_column_sound_speed_source, allowed_values)
            )

        self._water_column_sound_speed_source = water_column_sound_speed_source

    @property
    def water_column_sound_speed(self):
        """Gets the water_column_sound_speed of this WaterColumnData.  # noqa: E501


        :return: The water_column_sound_speed of this WaterColumnData.  # noqa: E501
        :rtype: float
        """
        return self._water_column_sound_speed

    @water_column_sound_speed.setter
    def water_column_sound_speed(self, water_column_sound_speed):
        """Sets the water_column_sound_speed of this WaterColumnData.


        :param water_column_sound_speed: The water_column_sound_speed of this WaterColumnData.  # noqa: E501
        :type: float
        """

        self._water_column_sound_speed = water_column_sound_speed

    @property
    def selected_profile(self):
        """Gets the selected_profile of this WaterColumnData.  # noqa: E501


        :return: The selected_profile of this WaterColumnData.  # noqa: E501
        :rtype: str
        """
        return self._selected_profile

    @selected_profile.setter
    def selected_profile(self, selected_profile):
        """Sets the selected_profile of this WaterColumnData.


        :param selected_profile: The selected_profile of this WaterColumnData.  # noqa: E501
        :type: str
        """

        self._selected_profile = selected_profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WaterColumnData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaterColumnData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
