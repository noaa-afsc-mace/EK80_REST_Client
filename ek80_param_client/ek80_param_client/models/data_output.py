# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'output_name': 'str',
        'output_type': 'str',
        'output_destination': 'str',
        'port_name': 'str',
        'selected_channel': 'str'
    }

    attribute_map = {
        'output_name': 'output-name',
        'output_type': 'output-type',
        'output_destination': 'output-destination',
        'port_name': 'port-name',
        'selected_channel': 'selected-channel'
    }

    def __init__(self, output_name=None, output_type=None, output_destination=None, port_name=None, selected_channel=None):  # noqa: E501
        """DataOutput - a model defined in Swagger"""  # noqa: E501

        self._output_name = None
        self._output_type = None
        self._output_destination = None
        self._port_name = None
        self._selected_channel = None
        self.discriminator = None

        if output_name is not None:
            self.output_name = output_name
        if output_type is not None:
            self.output_type = output_type
        if output_destination is not None:
            self.output_destination = output_destination
        if port_name is not None:
            self.port_name = port_name
        if selected_channel is not None:
            self.selected_channel = selected_channel

    @property
    def output_name(self):
        """Gets the output_name of this DataOutput.  # noqa: E501


        :return: The output_name of this DataOutput.  # noqa: E501
        :rtype: str
        """
        return self._output_name

    @output_name.setter
    def output_name(self, output_name):
        """Sets the output_name of this DataOutput.


        :param output_name: The output_name of this DataOutput.  # noqa: E501
        :type: str
        """

        self._output_name = output_name

    @property
    def output_type(self):
        """Gets the output_type of this DataOutput.  # noqa: E501


        :return: The output_type of this DataOutput.  # noqa: E501
        :rtype: str
        """
        return self._output_type

    @output_type.setter
    def output_type(self, output_type):
        """Sets the output_type of this DataOutput.


        :param output_type: The output_type of this DataOutput.  # noqa: E501
        :type: str
        """

        self._output_type = output_type

    @property
    def output_destination(self):
        """Gets the output_destination of this DataOutput.  # noqa: E501


        :return: The output_destination of this DataOutput.  # noqa: E501
        :rtype: str
        """
        return self._output_destination

    @output_destination.setter
    def output_destination(self, output_destination):
        """Sets the output_destination of this DataOutput.


        :param output_destination: The output_destination of this DataOutput.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "port", "file"]  # noqa: E501
        if output_destination not in allowed_values:
            raise ValueError(
                "Invalid value for `output_destination` ({0}), must be one of {1}"  # noqa: E501
                .format(output_destination, allowed_values)
            )

        self._output_destination = output_destination

    @property
    def port_name(self):
        """Gets the port_name of this DataOutput.  # noqa: E501


        :return: The port_name of this DataOutput.  # noqa: E501
        :rtype: str
        """
        return self._port_name

    @port_name.setter
    def port_name(self, port_name):
        """Sets the port_name of this DataOutput.


        :param port_name: The port_name of this DataOutput.  # noqa: E501
        :type: str
        """

        self._port_name = port_name

    @property
    def selected_channel(self):
        """Gets the selected_channel of this DataOutput.  # noqa: E501


        :return: The selected_channel of this DataOutput.  # noqa: E501
        :rtype: str
        """
        return self._selected_channel

    @selected_channel.setter
    def selected_channel(self, selected_channel):
        """Sets the selected_channel of this DataOutput.


        :param selected_channel: The selected_channel of this DataOutput.  # noqa: E501
        :type: str
        """

        self._selected_channel = selected_channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
