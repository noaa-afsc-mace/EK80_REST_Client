# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NavigationData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'int',
        'has_timed_out': 'bool',
        'position': 'PositionInfo',
        'course': 'DoubleValueWithInputStatus',
        'speed': 'DoubleValueWithInputStatus',
        'heading': 'DoubleValueWithInputStatus',
        'vessel_distance': 'float'
    }

    attribute_map = {
        'time': 'time',
        'has_timed_out': 'has-timed-out',
        'position': 'position',
        'course': 'course',
        'speed': 'speed',
        'heading': 'heading',
        'vessel_distance': 'vessel-distance'
    }

    def __init__(self, time=None, has_timed_out=None, position=None, course=None, speed=None, heading=None, vessel_distance=None):  # noqa: E501
        """NavigationData - a model defined in Swagger"""  # noqa: E501

        self._time = None
        self._has_timed_out = None
        self._position = None
        self._course = None
        self._speed = None
        self._heading = None
        self._vessel_distance = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if has_timed_out is not None:
            self.has_timed_out = has_timed_out
        if position is not None:
            self.position = position
        if course is not None:
            self.course = course
        if speed is not None:
            self.speed = speed
        if heading is not None:
            self.heading = heading
        if vessel_distance is not None:
            self.vessel_distance = vessel_distance

    @property
    def time(self):
        """Gets the time of this NavigationData.  # noqa: E501


        :return: The time of this NavigationData.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this NavigationData.


        :param time: The time of this NavigationData.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def has_timed_out(self):
        """Gets the has_timed_out of this NavigationData.  # noqa: E501


        :return: The has_timed_out of this NavigationData.  # noqa: E501
        :rtype: bool
        """
        return self._has_timed_out

    @has_timed_out.setter
    def has_timed_out(self, has_timed_out):
        """Sets the has_timed_out of this NavigationData.


        :param has_timed_out: The has_timed_out of this NavigationData.  # noqa: E501
        :type: bool
        """

        self._has_timed_out = has_timed_out

    @property
    def position(self):
        """Gets the position of this NavigationData.  # noqa: E501


        :return: The position of this NavigationData.  # noqa: E501
        :rtype: PositionInfo
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this NavigationData.


        :param position: The position of this NavigationData.  # noqa: E501
        :type: PositionInfo
        """

        self._position = position

    @property
    def course(self):
        """Gets the course of this NavigationData.  # noqa: E501


        :return: The course of this NavigationData.  # noqa: E501
        :rtype: DoubleValueWithInputStatus
        """
        return self._course

    @course.setter
    def course(self, course):
        """Sets the course of this NavigationData.


        :param course: The course of this NavigationData.  # noqa: E501
        :type: DoubleValueWithInputStatus
        """

        self._course = course

    @property
    def speed(self):
        """Gets the speed of this NavigationData.  # noqa: E501


        :return: The speed of this NavigationData.  # noqa: E501
        :rtype: DoubleValueWithInputStatus
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this NavigationData.


        :param speed: The speed of this NavigationData.  # noqa: E501
        :type: DoubleValueWithInputStatus
        """

        self._speed = speed

    @property
    def heading(self):
        """Gets the heading of this NavigationData.  # noqa: E501


        :return: The heading of this NavigationData.  # noqa: E501
        :rtype: DoubleValueWithInputStatus
        """
        return self._heading

    @heading.setter
    def heading(self, heading):
        """Sets the heading of this NavigationData.


        :param heading: The heading of this NavigationData.  # noqa: E501
        :type: DoubleValueWithInputStatus
        """

        self._heading = heading

    @property
    def vessel_distance(self):
        """Gets the vessel_distance of this NavigationData.  # noqa: E501


        :return: The vessel_distance of this NavigationData.  # noqa: E501
        :rtype: float
        """
        return self._vessel_distance

    @vessel_distance.setter
    def vessel_distance(self, vessel_distance):
        """Sets the vessel_distance of this NavigationData.


        :param vessel_distance: The vessel_distance of this NavigationData.  # noqa: E501
        :type: float
        """

        self._vessel_distance = vessel_distance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NavigationData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NavigationData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
