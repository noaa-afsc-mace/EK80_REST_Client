# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ChannelPingConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ping': 'Ping',
        'fan': 'RxFan',
        'transducer': 'Transducer'
    }

    attribute_map = {
        'ping': 'ping',
        'fan': 'fan',
        'transducer': 'transducer'
    }

    def __init__(self, ping=None, fan=None, transducer=None):  # noqa: E501
        """ChannelPingConfiguration - a model defined in Swagger"""  # noqa: E501

        self._ping = None
        self._fan = None
        self._transducer = None
        self.discriminator = None

        if ping is not None:
            self.ping = ping
        if fan is not None:
            self.fan = fan
        if transducer is not None:
            self.transducer = transducer

    @property
    def ping(self):
        """Gets the ping of this ChannelPingConfiguration.  # noqa: E501


        :return: The ping of this ChannelPingConfiguration.  # noqa: E501
        :rtype: Ping
        """
        return self._ping

    @ping.setter
    def ping(self, ping):
        """Sets the ping of this ChannelPingConfiguration.


        :param ping: The ping of this ChannelPingConfiguration.  # noqa: E501
        :type: Ping
        """

        self._ping = ping

    @property
    def fan(self):
        """Gets the fan of this ChannelPingConfiguration.  # noqa: E501


        :return: The fan of this ChannelPingConfiguration.  # noqa: E501
        :rtype: RxFan
        """
        return self._fan

    @fan.setter
    def fan(self, fan):
        """Sets the fan of this ChannelPingConfiguration.


        :param fan: The fan of this ChannelPingConfiguration.  # noqa: E501
        :type: RxFan
        """

        self._fan = fan

    @property
    def transducer(self):
        """Gets the transducer of this ChannelPingConfiguration.  # noqa: E501


        :return: The transducer of this ChannelPingConfiguration.  # noqa: E501
        :rtype: Transducer
        """
        return self._transducer

    @transducer.setter
    def transducer(self, transducer):
        """Sets the transducer of this ChannelPingConfiguration.


        :param transducer: The transducer of this ChannelPingConfiguration.  # noqa: E501
        :type: Transducer
        """

        self._transducer = transducer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChannelPingConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChannelPingConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
