# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MotionData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'int',
        'has_timed_out': 'bool',
        'heave': 'float',
        'sway': 'float',
        'surge': 'float',
        'yaw': 'float',
        'pitch': 'float',
        'roll': 'float'
    }

    attribute_map = {
        'time': 'time',
        'has_timed_out': 'has-timed-out',
        'heave': 'heave',
        'sway': 'sway',
        'surge': 'surge',
        'yaw': 'yaw',
        'pitch': 'pitch',
        'roll': 'roll'
    }

    def __init__(self, time=None, has_timed_out=None, heave=None, sway=None, surge=None, yaw=None, pitch=None, roll=None):  # noqa: E501
        """MotionData - a model defined in Swagger"""  # noqa: E501

        self._time = None
        self._has_timed_out = None
        self._heave = None
        self._sway = None
        self._surge = None
        self._yaw = None
        self._pitch = None
        self._roll = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if has_timed_out is not None:
            self.has_timed_out = has_timed_out
        if heave is not None:
            self.heave = heave
        if sway is not None:
            self.sway = sway
        if surge is not None:
            self.surge = surge
        if yaw is not None:
            self.yaw = yaw
        if pitch is not None:
            self.pitch = pitch
        if roll is not None:
            self.roll = roll

    @property
    def time(self):
        """Gets the time of this MotionData.  # noqa: E501


        :return: The time of this MotionData.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this MotionData.


        :param time: The time of this MotionData.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def has_timed_out(self):
        """Gets the has_timed_out of this MotionData.  # noqa: E501


        :return: The has_timed_out of this MotionData.  # noqa: E501
        :rtype: bool
        """
        return self._has_timed_out

    @has_timed_out.setter
    def has_timed_out(self, has_timed_out):
        """Sets the has_timed_out of this MotionData.


        :param has_timed_out: The has_timed_out of this MotionData.  # noqa: E501
        :type: bool
        """

        self._has_timed_out = has_timed_out

    @property
    def heave(self):
        """Gets the heave of this MotionData.  # noqa: E501


        :return: The heave of this MotionData.  # noqa: E501
        :rtype: float
        """
        return self._heave

    @heave.setter
    def heave(self, heave):
        """Sets the heave of this MotionData.


        :param heave: The heave of this MotionData.  # noqa: E501
        :type: float
        """

        self._heave = heave

    @property
    def sway(self):
        """Gets the sway of this MotionData.  # noqa: E501


        :return: The sway of this MotionData.  # noqa: E501
        :rtype: float
        """
        return self._sway

    @sway.setter
    def sway(self, sway):
        """Sets the sway of this MotionData.


        :param sway: The sway of this MotionData.  # noqa: E501
        :type: float
        """

        self._sway = sway

    @property
    def surge(self):
        """Gets the surge of this MotionData.  # noqa: E501


        :return: The surge of this MotionData.  # noqa: E501
        :rtype: float
        """
        return self._surge

    @surge.setter
    def surge(self, surge):
        """Sets the surge of this MotionData.


        :param surge: The surge of this MotionData.  # noqa: E501
        :type: float
        """

        self._surge = surge

    @property
    def yaw(self):
        """Gets the yaw of this MotionData.  # noqa: E501


        :return: The yaw of this MotionData.  # noqa: E501
        :rtype: float
        """
        return self._yaw

    @yaw.setter
    def yaw(self, yaw):
        """Sets the yaw of this MotionData.


        :param yaw: The yaw of this MotionData.  # noqa: E501
        :type: float
        """

        self._yaw = yaw

    @property
    def pitch(self):
        """Gets the pitch of this MotionData.  # noqa: E501


        :return: The pitch of this MotionData.  # noqa: E501
        :rtype: float
        """
        return self._pitch

    @pitch.setter
    def pitch(self, pitch):
        """Sets the pitch of this MotionData.


        :param pitch: The pitch of this MotionData.  # noqa: E501
        :type: float
        """

        self._pitch = pitch

    @property
    def roll(self):
        """Gets the roll of this MotionData.  # noqa: E501


        :return: The roll of this MotionData.  # noqa: E501
        :rtype: float
        """
        return self._roll

    @roll.setter
    def roll(self, roll):
        """Sets the roll of this MotionData.


        :param roll: The roll of this MotionData.  # noqa: E501
        :type: float
        """

        self._roll = roll

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MotionData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MotionData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
