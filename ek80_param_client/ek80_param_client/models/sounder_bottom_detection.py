# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SounderBottomDetection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bottom_detection_active': 'bool',
        'maximum_depth': 'float',
        'minimum_depth': 'float',
        'bottom_backstep': 'float'
    }

    attribute_map = {
        'bottom_detection_active': 'bottom-detection-active',
        'maximum_depth': 'maximum-depth',
        'minimum_depth': 'minimum-depth',
        'bottom_backstep': 'bottom-backstep'
    }

    def __init__(self, bottom_detection_active=None, maximum_depth=None, minimum_depth=None, bottom_backstep=None):  # noqa: E501
        """SounderBottomDetection - a model defined in Swagger"""  # noqa: E501

        self._bottom_detection_active = None
        self._maximum_depth = None
        self._minimum_depth = None
        self._bottom_backstep = None
        self.discriminator = None

        if bottom_detection_active is not None:
            self.bottom_detection_active = bottom_detection_active
        if maximum_depth is not None:
            self.maximum_depth = maximum_depth
        if minimum_depth is not None:
            self.minimum_depth = minimum_depth
        if bottom_backstep is not None:
            self.bottom_backstep = bottom_backstep

    @property
    def bottom_detection_active(self):
        """Gets the bottom_detection_active of this SounderBottomDetection.  # noqa: E501


        :return: The bottom_detection_active of this SounderBottomDetection.  # noqa: E501
        :rtype: bool
        """
        return self._bottom_detection_active

    @bottom_detection_active.setter
    def bottom_detection_active(self, bottom_detection_active):
        """Sets the bottom_detection_active of this SounderBottomDetection.


        :param bottom_detection_active: The bottom_detection_active of this SounderBottomDetection.  # noqa: E501
        :type: bool
        """

        self._bottom_detection_active = bottom_detection_active

    @property
    def maximum_depth(self):
        """Gets the maximum_depth of this SounderBottomDetection.  # noqa: E501


        :return: The maximum_depth of this SounderBottomDetection.  # noqa: E501
        :rtype: float
        """
        return self._maximum_depth

    @maximum_depth.setter
    def maximum_depth(self, maximum_depth):
        """Sets the maximum_depth of this SounderBottomDetection.


        :param maximum_depth: The maximum_depth of this SounderBottomDetection.  # noqa: E501
        :type: float
        """

        self._maximum_depth = maximum_depth

    @property
    def minimum_depth(self):
        """Gets the minimum_depth of this SounderBottomDetection.  # noqa: E501


        :return: The minimum_depth of this SounderBottomDetection.  # noqa: E501
        :rtype: float
        """
        return self._minimum_depth

    @minimum_depth.setter
    def minimum_depth(self, minimum_depth):
        """Sets the minimum_depth of this SounderBottomDetection.


        :param minimum_depth: The minimum_depth of this SounderBottomDetection.  # noqa: E501
        :type: float
        """

        self._minimum_depth = minimum_depth

    @property
    def bottom_backstep(self):
        """Gets the bottom_backstep of this SounderBottomDetection.  # noqa: E501


        :return: The bottom_backstep of this SounderBottomDetection.  # noqa: E501
        :rtype: float
        """
        return self._bottom_backstep

    @bottom_backstep.setter
    def bottom_backstep(self, bottom_backstep):
        """Sets the bottom_backstep of this SounderBottomDetection.


        :param bottom_backstep: The bottom_backstep of this SounderBottomDetection.  # noqa: E501
        :type: float
        """

        self._bottom_backstep = bottom_backstep

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SounderBottomDetection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SounderBottomDetection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
