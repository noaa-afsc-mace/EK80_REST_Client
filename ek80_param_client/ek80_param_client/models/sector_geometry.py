# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SectorGeometry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'opening': 'SectorOpening',
        'steering': 'GeoVector',
        'rotation': 'GeoVector'
    }

    attribute_map = {
        'opening': 'opening',
        'steering': 'steering',
        'rotation': 'rotation'
    }

    def __init__(self, opening=None, steering=None, rotation=None):  # noqa: E501
        """SectorGeometry - a model defined in Swagger"""  # noqa: E501

        self._opening = None
        self._steering = None
        self._rotation = None
        self.discriminator = None

        if opening is not None:
            self.opening = opening
        if steering is not None:
            self.steering = steering
        if rotation is not None:
            self.rotation = rotation

    @property
    def opening(self):
        """Gets the opening of this SectorGeometry.  # noqa: E501


        :return: The opening of this SectorGeometry.  # noqa: E501
        :rtype: SectorOpening
        """
        return self._opening

    @opening.setter
    def opening(self, opening):
        """Sets the opening of this SectorGeometry.


        :param opening: The opening of this SectorGeometry.  # noqa: E501
        :type: SectorOpening
        """

        self._opening = opening

    @property
    def steering(self):
        """Gets the steering of this SectorGeometry.  # noqa: E501


        :return: The steering of this SectorGeometry.  # noqa: E501
        :rtype: GeoVector
        """
        return self._steering

    @steering.setter
    def steering(self, steering):
        """Sets the steering of this SectorGeometry.


        :param steering: The steering of this SectorGeometry.  # noqa: E501
        :type: GeoVector
        """

        self._steering = steering

    @property
    def rotation(self):
        """Gets the rotation of this SectorGeometry.  # noqa: E501


        :return: The rotation of this SectorGeometry.  # noqa: E501
        :rtype: GeoVector
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this SectorGeometry.


        :param rotation: The rotation of this SectorGeometry.  # noqa: E501
        :type: GeoVector
        """

        self._rotation = rotation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SectorGeometry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SectorGeometry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
