# coding: utf-8

"""
    REST API for the EK80 Echo Sounder

    The API, and the documentation of it, is still under construction. Feel free to experiment with it, but Kongsberg is only able to provide very limited support at the moment.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RxBeam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'beam_name': 'str',
        'id': 'int',
        'rx_gain': 'float',
        'geometry': 'SectorGeometry',
        'beam_processing_data': 'NullableBeamProcessingData'
    }

    attribute_map = {
        'beam_name': 'beam-name',
        'id': 'id',
        'rx_gain': 'rx-gain',
        'geometry': 'geometry',
        'beam_processing_data': 'beam-processing-data'
    }

    def __init__(self, beam_name=None, id=None, rx_gain=None, geometry=None, beam_processing_data=None):  # noqa: E501
        """RxBeam - a model defined in Swagger"""  # noqa: E501

        self._beam_name = None
        self._id = None
        self._rx_gain = None
        self._geometry = None
        self._beam_processing_data = None
        self.discriminator = None

        if beam_name is not None:
            self.beam_name = beam_name
        if id is not None:
            self.id = id
        if rx_gain is not None:
            self.rx_gain = rx_gain
        if geometry is not None:
            self.geometry = geometry
        if beam_processing_data is not None:
            self.beam_processing_data = beam_processing_data

    @property
    def beam_name(self):
        """Gets the beam_name of this RxBeam.  # noqa: E501


        :return: The beam_name of this RxBeam.  # noqa: E501
        :rtype: str
        """
        return self._beam_name

    @beam_name.setter
    def beam_name(self, beam_name):
        """Sets the beam_name of this RxBeam.


        :param beam_name: The beam_name of this RxBeam.  # noqa: E501
        :type: str
        """

        self._beam_name = beam_name

    @property
    def id(self):
        """Gets the id of this RxBeam.  # noqa: E501


        :return: The id of this RxBeam.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RxBeam.


        :param id: The id of this RxBeam.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def rx_gain(self):
        """Gets the rx_gain of this RxBeam.  # noqa: E501


        :return: The rx_gain of this RxBeam.  # noqa: E501
        :rtype: float
        """
        return self._rx_gain

    @rx_gain.setter
    def rx_gain(self, rx_gain):
        """Sets the rx_gain of this RxBeam.


        :param rx_gain: The rx_gain of this RxBeam.  # noqa: E501
        :type: float
        """

        self._rx_gain = rx_gain

    @property
    def geometry(self):
        """Gets the geometry of this RxBeam.  # noqa: E501


        :return: The geometry of this RxBeam.  # noqa: E501
        :rtype: SectorGeometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this RxBeam.


        :param geometry: The geometry of this RxBeam.  # noqa: E501
        :type: SectorGeometry
        """

        self._geometry = geometry

    @property
    def beam_processing_data(self):
        """Gets the beam_processing_data of this RxBeam.  # noqa: E501


        :return: The beam_processing_data of this RxBeam.  # noqa: E501
        :rtype: NullableBeamProcessingData
        """
        return self._beam_processing_data

    @beam_processing_data.setter
    def beam_processing_data(self, beam_processing_data):
        """Sets the beam_processing_data of this RxBeam.


        :param beam_processing_data: The beam_processing_data of this RxBeam.  # noqa: E501
        :type: NullableBeamProcessingData
        """

        self._beam_processing_data = beam_processing_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RxBeam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RxBeam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
